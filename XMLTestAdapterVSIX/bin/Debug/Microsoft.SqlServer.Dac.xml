<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.SqlServer.Dac</name>
    </assembly>
    <members>
        <member name="T:Microsoft.SqlServer.Dac.BacPackage">
            <summary>
            Representation of the artifact that contains the definition and data of a data-tier application.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.BacPackage.Dispose">
            <summary>
            Release the resources held by this instance.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.BacPackage.Unpack(System.String)">
            <summary>
            Place the contents of this package into the directory specified by <paramref name="directoryPath"/>.
            </summary>
            <param name="directoryPath">
            Base directory in which to place the package contents.
            </param>
            <exception cref="T:System.ArgumentException">
            If <paramref name="directoryPath"/> is a null reference or empty string.
            </exception>
            <exception cref="T:Microsoft.SqlServer.Dac.DacServicesException">
            If an error occurs while attempting to unpack the package.
            </exception>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.BacPackage.Load(System.String)">
            <summary>
            Load a package file specified by <paramref name="fileName"/>.
            </summary>
            <param name="fileName">
            Path to the package file.
            </param>
            <returns>
            <see cref="T:Microsoft.SqlServer.Dac.DacPackage"/> instance that represents the package loaded from the specified file.
            </returns>
            <exception cref="T:Microsoft.SqlServer.Dac.DacServicesException">
            If there is a problem reading the package; or if the package contains exported data.
            </exception>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.BacPackage.Load(System.String,Microsoft.SqlServer.Dac.DacSchemaModelStorageType)">
            <summary>
            Load a package file specified by <paramref name="fileName"/>.
            </summary>
            <param name="fileName">
            Path to the package file.
            </param>
            <param name="modelStorageType">
            Backing storage type for package instance.
            </param>
            <returns>
            <see cref="T:Microsoft.SqlServer.Dac.DacPackage"/> instance that represents the package loaded from the specified file.
            </returns>
            <exception cref="T:Microsoft.SqlServer.Dac.DacServicesException">
            If there is a problem reading the package; or if the package does not contain exported data.
            </exception>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.BacPackage.Load(System.IO.Stream)">
            <summary>
            Load a package from the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">
            Stream from which to read the package.
            </param>
            <returns>
            <see cref="T:Microsoft.SqlServer.Dac.DacPackage"/> instance that represents the package loaded from the specified file.
            </returns>
            <exception cref="T:Microsoft.SqlServer.Dac.DacServicesException">
            If there is a problem reading the package; or if the package does not contain exported data.
            </exception>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.BacPackage.Load(System.IO.Stream,Microsoft.SqlServer.Dac.DacSchemaModelStorageType)">
            <summary>
            Load a package from the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">
            Stream from which to read the package.
            </param>
            <param name="modelStorageType">
            Backing storage type for package instance.
            </param>
            <returns>
            <see cref="T:Microsoft.SqlServer.Dac.DacPackage"/> instance that represents the package loaded from the specified file.
            </returns>
            <exception cref="T:Microsoft.SqlServer.Dac.DacServicesException">
            If there is a problem reading the package; or if the package does not contain exported data.
            </exception>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.NestedDeploymentPropertyAttribute">
            <summary>
            This class supports the product infrastructure and is not intended to be used directly 
            from your code.
            Indicates that a deployment property should be expanded for commandline property overriding
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.NestedDeploymentPropertyAttribute.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.DacExportOptions">
            <summary>
            Defines options that affect the behavior of package export from a database.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.DacExportOptions.#ctor">
            <summary>
            Construct a new instance of the <see cref="T:Microsoft.SqlServer.Dac.DacExportOptions"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacExportOptions.CommandTimeout">
            <summary>
            Specifies the command timeout in seconds when executing queries against SQLServer.
            </summary>
            <value>
            The command timeout in seconds.
            Default is 60
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacExportOptions.Storage">
            <summary>
            Get the type of backing storage for the schema model used during extraction.
            </summary>
            <value>
            Enumeration value that specifies the type of backing storage for the schema model used during extraction.
            Default value is File.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacExportOptions.TargetEngineVersion">
            <summary>
            Specifies what the target engine version is expected to be. 
            This is used during export to define the allowed engine version to validate against
            and whether the features of the database match the capabilities of that engine version.
            </summary>
            <value>
            The latest version of Azure contains support for additional capabilities. When this value is
            <see cref="F:Microsoft.SqlServer.Dac.EngineVersion.Default"/> or <see cref="F:Microsoft.SqlServer.Dac.EngineVersion.V11"/>,
            the export operation will fail if the target database is found to contain any objects that
            require a newer engine version.
            
            The default value for this option is <see cref="F:Microsoft.SqlServer.Dac.EngineVersion.Latest"/>, which means that 
            validation will ensure that the export operation will only fail if the target database is 
            found to contain any objects that are not supported in the latest engine version.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacExportOptions.VerifyFullTextDocumentTypesSupported">
            <summary>
            Get or set boolean that specifies whether the supported full-text document types for Microsoft Azure SQL Database v12 should be verified.
            </summary>
            <value>
            True if the package should be verified; otherwise false.
            Default value is false.
            </value> 
        </member>
        <member name="T:Microsoft.SqlServer.Dac.DacImportOptions">
            <summary>
            Defines options that affect the behavior of package import to a database.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.DacImportOptions.#ctor">
            <summary>
            Construct a new instance of the <see cref="T:Microsoft.SqlServer.Dac.DacImportOptions"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacImportOptions.ImportContributors">
            <summary>
            Specifies additional deployment contributors which should run.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacImportOptions.ImportContributorArguments">
            <summary>
            Specifies additional deployment contributor arguments.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacImportOptions.DatabaseSpecification">
            <summary>
            Defines optional parameters specific to a Microsoft Azure SQL Database.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacImportOptions.CommandTimeout">
            <summary>
            Specifies the command timeout in seconds when executing queries against SQLServer.
            </summary>
            <value>
            The command timeout in seconds.
            Default is 60
            </value>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.DacOperationProgressMessage">
            <summary>
             Progress message associated with the overal progress import or export operation.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.DacMessage">
            <summary>
            Data associated with an executing operation to report status updates or errors.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.DacMessage.ToString">
            <summary>
            Return a string that represents the current object.
            </summary>
            <returns>
            String that represents the current object.
            </returns>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacMessage.MessageType">
            <summary>
            Get the type of the event message.
            </summary>
            <value>
            Enumeration value that specifies the type of the event message.
            </value>
            <seealso cref="P:Microsoft.SqlServer.Dac.DacMessage.Message"/>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacMessage.Number">
            <summary>
            Get numeric value associated with the event message.
            </summary>
            <value>
            Numeric value associated with the message.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacMessage.Prefix">
            <summary>
            Get string prefix associated with the source of the event message.
            </summary>
            <value>
            String prefix associated with the source of the event message.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacMessage.Message">
            <summary>
            Get friendly message for the current status of an operation.
            </summary>
            <value>
            String message for the current status of an operation.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacOperationProgressMessage.Progress">
            <summary>
            Current progress in percent complete.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.DacDataProgressMessage">
            <summary>
             Data associated with an executing data operation to report status updates or errors related to progress.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDataProgressMessage.Progress">
            <summary>
            Current progress in percent complete.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDataProgressMessage.SchemaName">
            <summary>
            The schema name of the table whose progress is being reported.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDataProgressMessage.TableName">
            <summary>
            The name of the table whose progress is being reported.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.DacDeployOptions">
            <summary>
            Defines options that affect the behavior of package deployment to a database.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.DacDeployOptions.#ctor">
            <summary>
            Create a new instance of the <see cref="T:Microsoft.SqlServer.Dac.DacDeployOptions"/> class
            with default options.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.DacDeployOptions.EnableDnrOrdering(System.Boolean)">
            <summary>
            Interal mechanism to control deployment DNR ordering behavior
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.DacDeployOptions.#ctor(Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentOptions)">
            <summary>
            Create a new instance of the <see cref="T:Microsoft.SqlServer.Dac.DacDeployOptions"/> class
            with specified options.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.DacDeployOptions.#ctor(Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentOptions,System.Boolean)">
            <summary>
            Create a new instance of the <see cref="T:Microsoft.SqlServer.Dac.DacDeployOptions"/> class
            with specified options.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.DacDeployOptions.InitializeDefaults(Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeploymentOptions)">
            <summary>
            Initialize the expected defaults for this API.
            </summary>
            <remarks>
            Only defined where default values differ from the core defaults.
            When new options are added to SqlDeploymentOptions or a default value changed,
            all clients must determine if they must override the default.
            Redundantly specifying existing defaults doesn't reduce need for this
            process when adding options or changing defaults.  Unit tests should
            be employed to validating expectations for each deployment client
            that overrides default options (e.g. power-buffer, schema-compare, this api).
            When removing or renaming an option, the compiler will complain (good).
            </remarks>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.AdditionalDeploymentContributors">
            <summary>
            Specifies additional deployment contributors which should run - in addition
            to those specified in the dacpac.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.AdditionalDeploymentContributorArguments">
            <summary>
            Specifies additional deployment contributor arguments in addition to those already listed
            in the dacpac.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.AllowDropBlockingAssemblies">
            <summary>
            Get or set boolean that specifies whether CLR deployment will cause blocking assemblies to be dropped.
            </summary>
            <value>
            True to drop blocking assemblies during CLR deployment; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.AllowIncompatiblePlatform">
            <summary>
            Get or set boolean that specifies whether deployment will block due to platform compatibility.
            </summary>
            <value>
            True to block deployment to incompatible platforms; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.BackupDatabaseBeforeChanges">
            <summary>
            Get or set boolean that specifies whether a database backup will be performed before proceeding 
            with the actual deployment actions.
            </summary>
            <value>
            True to perform a database backup prior to deployment; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.BlockOnPossibleDataLoss">
            <summary>
            Get or set boolean that specifies whether deployment should stop if the operation could cause data loss.
            </summary>
            <value>
            True to stop deployment if possible data loss if detected; otherwise, false.
            Default is true.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.BlockWhenDriftDetected">
            <summary>
            Get or set boolean that specifies whether the system will check for differences between the 
            present state of the database and the registered state of the database and block deployment 
            if changes are detected.  Even if this option is set to true, drift detection will only occur 
            on a database if it was previously deployed with the <see cref="P:Microsoft.SqlServer.Dac.DacDeployOptions.RegisterDataTierApplication"/> option enabled.
            </summary>
            <value>
            True to error is drift is detected; otherwise, false.
            Default is true.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.CommandTimeout">
            <summary>
            Specifies the command timeout in seconds when executing queries against SQLServer.
            </summary>
            <value>
            The command timeout in seconds.
            Default is 60
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.CommentOutSetVarDeclarations">
            <summary>
            Get or set boolean that specifies whether the declaration of SQLCMD variables are commented 
            out in the script header.
            </summary>
            <value>
            True to comment out these declarations; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.CompareUsingTargetCollation">
            <summary>
            Get or set boolean that specifies whether the target collation will be used for identifier 
            comparison.
            </summary>
            <value>
            False to use the source collation; otherwise, true to use the target collation.
            Default is false.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.CreateNewDatabase">
            <summary>
            Get or set boolean that specifies whether the existing database will be dropped
            and a new database created before proceeding with the actual deployment actions.
            Acquires single-user mode before dropping the existing database.
            </summary>
            <value>
            True to drop and re-create the database; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.DatabaseSpecification">
            <summary>
            Defines optional parameters specific to a Microsoft Azure SQL Database.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.DeployDatabaseInSingleUserMode">
            <summary>
            Get or set boolean that specifies whether the system will acquire single-user mode on the target
            database during the duration of the deployment operation.
            </summary>
            <value>
            True to acquire single-user mode during deployment; otherwise, false.
            Default is false.
            </value>
            <remarks>
            The database will be returned to multi-user mode after all changes are applied.
            Database may remain in single-user mode if an error occurs during execution.
            </remarks>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.DisableAndReenableDdlTriggers">
            <summary>
            Get or set boolean that specifies if all DDL triggers will be disabled for the duration of the 
            deployment operation and then re-enabled after all changes are applied.  
            </summary>
            <value>
            True to disable DDL triggers during deployment; otherwise, false.
            Default is true.
            </value>
            <remarks>
            Triggers may remain disabled if an error occurs during execution.
            </remarks>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.DoNotAlterChangeDataCaptureObjects">
            <summary>
            Get or set boolean that specifies whether items configured for Change Data Capture (CDC)
            should be altered during deployment.  
            </summary>
            <value>
            True to not alter objects configured for CDC; otherwise, false.
            Default is true.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.DoNotAlterReplicatedObjects">
            <summary>
            Get or set boolean that specifies whether items configured for Replication
            should be altered during deployment.  
            </summary>
            <value>
            True to not alter objects configured for Replication; otherwise, false.
            Default is true.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.DoNotDropObjectTypes">
            <summary>
            Get or set a collection of object types that will not be dropped from the target when
            no corresponding object exists in the source. Note that dropping and recreating objects
            of the specified type may still be necessary due to dependencies from other objects.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.DropConstraintsNotInSource">
            <summary>
            Get or set boolean that specifies whether to drop all constraints that do not
            exist in the source model.  
            </summary>
            <value>
            True to drop constraints not in the source model; otherwise, false.
            Default is true.
            </value>
            <remarks>
            This applies to check, default, foreign key, primary key, and unique constraints.
            </remarks>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.DropDmlTriggersNotInSource">
            <summary>
            Get or set boolean that specifies whether to drop all DML triggers that do not
            exist in the source model.
            </summary>
            <value>
            True to drop DML triggers not in the source model; otherwise, false.
            Default is true.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.DropExtendedPropertiesNotInSource">
            <summary>
            Get or set boolean that specifies whether to drop all extended properties that do 
            not exist in the source model.
            </summary>
            <value>
            True to drop extended properties not in the source model; otherwise, false.
            Default is true.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.DropIndexesNotInSource">
            <summary>
            Get or set boolean that specifies whether to drop all indexes that do not
            exist in the source model.
            </summary>
            <value>
            True to drop indexes not in the source model; otherwise, false.
            Default is true.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.DropObjectsNotInSource">
            <summary>
            Get or set boolean that specifies whether objects that exist in the target but not source should be dropped during deployment.
            </summary>
            <value>
            True if objects that exist in the target but not source should be dropped; otherwise false.
            Default is false.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.DropPermissionsNotInSource">
            <summary>
            Get or set boolean that specifies whether to drop all permissions that do not
            exist in the source model.
            </summary>
            <value>
            True to drop permissions not in the source model; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.DropRoleMembersNotInSource">
            <summary>
            Get or set boolean that specifies whether to drop all role memberships that do not
            exist in the source model.
            </summary>
            <value>
            True to drop role memberships not in the source model; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.DropStatisticsNotInSource">
            <summary>
            Get or set boolean that specifies whether to drop all role memberships that do not
            exist in the source model.
            </summary>
            <value>
            True to drop role memberships not in the source model; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.GenerateSmartDefaults">
            <summary>
            Get or set boolean that specifies whether default values should be generated to populate NULL columns that are constrained to NOT NULL values.
            </summary>
            <value>
            True if default values should be generated; otherwise false.
            Default is false.
            </value>
            <remarks>
            This is useful when needing to add a new NOT NULL column to an existing table with data.
            </remarks>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.IgnoreAnsiNulls">
            <summary>
            Get or set boolean that specifies whether to exclude the ANSI_NULL option from 
            consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore differences in the ANSI_NULL option; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.IgnoreAuthorizer">
            <summary>
            Get or set boolean that specifies whether to exclude the AUTHORIZATION option from 
            consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore differences in the AUTHORIZATION option; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.IgnoreColumnCollation">
            <summary>
            Get or set boolean that specifies whether to exclude the collation specifier from 
            consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore differences in the collation specifier; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.IgnoreComments">
            <summary>
            Get or set boolean that specifies whether to exclude comments from 
            consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore differences in comments; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.IgnoreCryptographicProviderFilePath">
            <summary>
            Get or set boolean that specifies whether to exclude the file specification 
            of a cryptographic provider from consideration when comparing the source and 
            target model.
            </summary>
            <value>
            True to ignore differences in a cryptographic provider's  file specification; otherwise, false.
            Default is true.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.IgnoreDdlTriggerOrder">
            <summary>
            Get or set boolean that specifies whether to exclude DDL trigger order from 
            consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore differences in DDL trigger order; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.IgnoreDdlTriggerState">
            <summary>
            Get or set boolean that specifies whether to exclude DDL trigger state from 
            consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore differences in DDL trigger state; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.IgnoreDefaultSchema">
            <summary>
            Get or set boolean that specifies whether to exclude the DEFAULT_SCHEMA option from 
            consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore differences in the DEFAULT_SCHEMA options; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.IgnoreDmlTriggerOrder">
            <summary>
            Get or set boolean that specifies whether to exclude DML trigger order from 
            consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore differences in DDL trigger order; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.IgnoreDmlTriggerState">
            <summary>
            Get or set boolean that specifies whether to exclude DML trigger state from 
            consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore differences in DML trigger state; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.IgnoreExtendedProperties">
            <summary>
            Get or set boolean that specifies whether to exclude all extended properties from 
            consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore differences in extended properties; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.IgnoreFileAndLogFilePath">
            <summary>
            Get or set boolean that specifies whether to exclude the FILENAME option of 
            FILE objects from consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore differences in the FILENAME option of FILE objects; otherwise, false.
            Default is true.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.IgnoreFilegroupPlacement">
            <summary>
            Get or set boolean that specifies whether to exclude the filegroup specifier 
            from consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore differences in the filegroup specifier; otherwise, false.
            Default is true.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.IgnoreFileSize">
            <summary>
            Get or set boolean that specifies whether to exclude the SIZE option of FILE objects 
            from consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore differences in the SIZE option of FILE objects; otherwise, false.
            Default is true.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.IgnoreFillFactor">
            <summary>
            Get or set boolean that specifies whether to exclude the FILLFACTOR option
            from consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore differences in the FILLFACTOR option; otherwise, false.
            Default is true.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.IgnoreFullTextCatalogFilePath">
            <summary>
            Get or set boolean that specifies whether to exclude the path specification of 
            FULLTEXT CATALOG objects from consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore differences in the path specification of FULLTEXT CATALOG objects; otherwise, false.
            Default is true.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.IgnoreIdentitySeed">
            <summary>
            Get or set boolean that specifies whether to exclude the seed value of IDENTITY columns 
            from consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore differences in the seed value of IDENTITY columns; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.IgnoreIncrement">
            <summary>
            Get or set boolean that specifies whether to exclude the increment value of IDENTITY columns 
            from consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore differences in the increment value of IDENTITY columns; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.IgnoreIndexOptions">
            <summary>
            Get or set boolean that specifies whether to exclude differences in index options 
            from consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore differences in index options; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.IgnoreIndexPadding">
            <summary>
            Get or set boolean that specifies whether to exclude the PAD_INDEX option 
            from consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore differences in the PAD_INDEX option; otherwise, false.
            Default is true.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.IgnoreKeywordCasing">
            <summary>
            Get or set boolean that specifies whether to exclude difference in the casing of keywords 
            from consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore differences in the casing of keywords; otherwise, false.
            Default is true.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.IgnoreLockHintsOnIndexes">
            <summary>
            Get or set boolean that specifies whether to exclude the ALLOW_ROW_LOCKS and 
            ALLOW_PAGE_LOGKS options from consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore the ALLOW_ROW_LOCKS and ALLOW_PAGE_LOGKS options; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.IgnoreLoginSids">
            <summary>
            Get or set boolean that specifies whether to exclude the SID option of the LOGIN object 
            from consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore the SID option of the LOGIN object; otherwise, false.
            Default is true.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.ExcludeObjectTypes">
            <summary>
            Get or set a collection of object types to exclude from consideration when
            comparing the source and target model.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.IgnoreNotForReplication">
            <summary>
            Get or set boolean that specifies whether to exclude the NOT FOR REPLICATION option 
            from consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore the NOT FOR REPLICATION option; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.IgnoreObjectPlacementOnPartitionScheme">
            <summary>
            Get or set boolean that specifies whether to exclude the partition scheme object
            from consideration when comparing the source and target model for the following
            objects: Table, Index, Unique Key, Primary Key, and Queue.
            </summary>
            <value>
            True to ignore partition schemes; otherwise, false.
            Default is true.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.IgnorePartitionSchemes">
            <summary>
            Get or set boolean that specifies whether to exclude the parameter type and 
            boundary VALUES of a PARTITION FUNCTION from consideration when comparing the 
            source and target model.  Also excludes FILEGROUP and partition function of a 
            PARTITION SCHEMA from consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore aspects of partition functions and schemes; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.IgnorePermissions">
            <summary>
            Get or set boolean that specifies whether to exclude all permission statements 
            from consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore all permission statements; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.IgnoreQuotedIdentifiers">
            <summary>
            Get or set boolean that specifies whether to exclude the QUOTED_IDENTIFIER option 
            from consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore the QUOTED_IDENTIFIER option; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.IgnoreRoleMembership">
            <summary>
            Get or set boolean that specifies whether to exclude all ROLE MEMBERSHIP objects 
            from consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore ROLE MEMBERSHIP objects; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.IgnoreRouteLifetime">
            <summary>
            Get or set boolean that specifies whether to exclude the LIFETIME option of ROUTE objects 
            from consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore the LIFETIME option of ROUTE objects; otherwise, false.
            Default is true.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.IgnoreSemicolonBetweenStatements">
            <summary>
            Get or set boolean that specifies whether to exclude the existence or absence of semi-colons 
            from consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore semi-colons; otherwise, false.
            Default is true.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.IgnoreTableOptions">
            <summary>
            Get or set boolean that specifies whether the options on the target table are updated 
            to match the source table.
            </summary>
            <value>
            True to ignore difference in table options and not update the target table; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.IgnoreUserSettingsObjects">
            <summary>
            Get or set boolean that specifies whether to exclude user settings 
            from consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore differences in user settings; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.IgnoreWhitespace">
            <summary>
            Get or set boolean that specifies whether to exclude whitespace 
            from consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore differences whitespace; otherwise, false.
            Default is true.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.IgnoreWithNocheckOnCheckConstraints">
            <summary>
            Get or set boolean that specifies whether to exclude the CHECK|NO CHECK option of a CHECK 
            constraint object from consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore the CHECK|NO CHECK option of a CHECK constraint object; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.IgnoreWithNocheckOnForeignKeys">
            <summary>
            Get or set boolean that specifies whether to exclude the CHECK|NO CHECK option of a FOREIGN KEY  
            constraint object from consideration when comparing the source and target model.
            </summary>
            <value>
            True to ignore the CHECK|NO CHECK option of a FOREIGN KEY constraint object; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.IncludeCompositeObjects">
            <summary>
            Get or set boolean that specifies whether to include referenced, external elements that also 
            compose the source model and then update the target database in a single deployment operation.
            </summary>
            <value>
            True to include composite objects; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.IncludeTransactionalScripts">
            <summary>
            Get or set boolean that specifies whether to use transations during the deployment operation 
            and commit the transaction after all changes are successfully applied.
            </summary>
            <value>
            True to use transactions during deployment; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.NoAlterStatementsToChangeClrTypes">
            <summary>
            Get or set boolean that specifies whether to force a change to CLR assemblies by dropping and recreating them.
            </summary>
            <value>
            True if CLR assemblies should be dropped; otherwise false to allow ALTER statements to change CLR assemblies.
            Default is false.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.PopulateFilesOnFileGroups">
            <summary>
            Get or set boolean that specifies whether files are supplied for filegroups defined in the deployment source.
            </summary>
            <value>
            True to specify files for filegroups; otherwise false.
            Default is true.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.RegisterDataTierApplication">
            <summary>
            Get or set boolean that specifies whether the database will be registered as a Data-Tier Application.  
            If the target database is already a registered Data-Tier Application, then the registration will be updated.
            </summary>
            <value>
            True to register the database as a Data-Tier Application; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.RunDeploymentPlanExecutors">
            <summary>
            Specifies whether DeploymentPlanExecutor contributors should be run when other operations are executed.
            Default is false.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.ScriptDatabaseCollation">
            <summary>
            Get or set boolean that specifies whether the target database should be altered to match the 
            source model's collation.
            </summary>
            <value>
            True to alter the target database's collation; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.ScriptDatabaseCompatibility">
            <summary>
            Get or set boolean that specifies whether the target database should be altered to match the 
            source model's compatibility level.
            </summary>
            <value>
            True to alter the target database's compatibility level; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.ScriptDatabaseOptions">
            <summary>
            Get or set boolean that specifies whether the database options in the target database should 
            be updated to match the source model.
            </summary>
            <value>
            True to alter the target database's options; otherwise, false.
            Default is true.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.ScriptDeployStateChecks">
            <summary>
            Get or set boolean that specifies whether the target database should be checked to ensure that 
            it exists, is online and can be updated.
            </summary>
            <value>
            True to perform state checks on the target database; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.ScriptFileSize">
            <summary>
            Get or set boolean that specifies whether a file size is specified when adding files to file groups.
            </summary>
            <value>
            True to specify a file size when adding files to file groups; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.ScriptNewConstraintValidation">
            <summary>
            Get or set boolean that specifies whether constraints are validated after all changes are applied.
            </summary>
            <value>
            True to validate check constraints; otherwise, false.
            Default is true.
            </value>
            <remarks>
            Constraints are always added with NOCHECK option; as a result their validation is skipped during creation.
            </remarks>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.ScriptRefreshModule">
            <summary>
            Get or set boolean that specifies whether referencing procedures are refreshed when referenced objects are updated.
            </summary>
            <value>
            True to refresh referencing procedures; otherwise false.
            Default is true.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.TreatVerificationErrorsAsWarnings">
            <summary>
            Get or set boolean that specifies whether to treat errors that occur during publish verification as warnings. 
            The check is performed against the generated deployment plan before the plan is executed against the target database. 
            Plan verification detects problems, such as the loss of target-only objects (for example, indexes), that must be 
            dropped to make a change. Verification also detects situations where dependencies (such as tables or views) exist 
            because of a reference to a composite project, but do not exist in the target database. You might choose to treat 
            verification errors as warnings to get a complete list of issues instead of allowing the publish 
            action to stop when the first error occurs.
            </summary>
            <value>
            True to treat errors as warnings; otherwise, false.
            Default is false.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.UnmodifiableObjectWarnings">
            <summary>
            Get or set boolean that specifies whether warnings should be generated when differences are found 
            in objects that cannot be modified, for example, if the file size or file paths were different for a file.
            </summary>
            <value>
            True to generate warnings; otherwise, false.
            Default is true.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.VerifyCollationCompatibility">
            <summary>
            Get or set boolean that specifies whether deployment will verify that the collation specified in the 
            source model is compatible with the collation specified in the target model.
            </summary>
            <value>
            True to continue if errors are generated during plan verification; otherwise, false.
            Default is true.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.VerifyDeployment">
            <summary>
            Get or set boolean that specifies whether the plan verification phase is executed or not.
            </summary>
            <value>
            True to perform plan verification; otherwise, false to skip it.
            Default is true.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacDeployOptions.SqlCommandVariableValues">
            <summary>
            Get dictionary of SQL command variable values, keyed by variable name.
            </summary>
            <value>
            Dictionary of SQL command variable values, keyed by variable name.
            </value>
            <remarks>
            Valid values must be provided for every variable before deployment, or failures may occur during deployment.
            </remarks>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.DacErrorResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.BacpacShouldNotContainDeploymentScripts">
            <summary>
              Looks up a localized string similar to BACPAC should not contain either pre-deployment or post-deployment scripts..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.CannotWriteToPackage">
            <summary>
              Looks up a localized string similar to Cannot apply updates to a package loaded for read only..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.ConflictingExtendedPropertyDropSetting">
            <summary>
              Looks up a localized string similar to DropExtendedPropertiesNotInSource conflicts with the selected DoNotDropObjectType ExtendedProperties.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.ConflictingPermissionsDropSetting">
            <summary>
              Looks up a localized string similar to DropPermissionsNotInSource conflicts with the selected DoNotDropObjectType Permissions.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.ConflictingRoleMembershipDropSetting">
            <summary>
              Looks up a localized string similar to DropRoleMembersNotInSource conflicts with the selected DoNotDropObjectType RoleMembership.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.DacMessageFormat">
            <summary>
              Looks up a localized string similar to {0} {1}{2}: {3}.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.ElementValidationFailureMessage">
            <summary>
              Looks up a localized string similar to Error validating element {0}: {1}.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.ErrorAttemptToUpgradeExistingDatabase">
            <summary>
              Looks up a localized string similar to Cannot deploy to existing database when upgrading has been disabled..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.ErrorBacpacValidationFailed">
            <summary>
              Looks up a localized string similar to Validation of the schema model for data package failed. Check the inner exception for details..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.ErrorCannotOpenBacPackageWithoutData">
            <summary>
              Looks up a localized string similar to Cannot create a BACPAC from a file that does not contain exported data..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.ErrorCannotOpenDacPackageWithData">
            <summary>
              Looks up a localized string similar to Cannot create a DAC package from a file that contains exported data..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.ErrorConnectingToDatabase">
            <summary>
              Looks up a localized string similar to Could not connect to database server..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.ErrorContainingUnsupportedFullTextDocumentTypesForAzureV12">
            <summary>
              Looks up a localized string similar to Indexing for document type {0} is not supported on {1}..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.ErrorCouldNotDetermineExistenceOfDatabase">
            <summary>
              Looks up a localized string similar to Unable to determine the existence of database &apos;{0}&apos;. You must have a user with the same password in master or database &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.ErrorCouldNotDetermineProviderFromPackage">
            <summary>
              Looks up a localized string similar to Could not determine SQL platform from package..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.ErrorCouldNotDetermineServerVersion">
            <summary>
              Looks up a localized string similar to Database source is not a supported version of SQL Server {0}: {1}..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.ErrorDataTableNotFound">
            <summary>
              Looks up a localized string similar to Table with schema &quot;{0}&quot; and name &quot;{1}&quot; was specified for data import or export, but does not exist in the database schema..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.ErrorDeployingPackage">
            <summary>
              Looks up a localized string similar to Could not deploy package..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.ErrorExportingPackage">
            <summary>
              Looks up a localized string similar to Could not export schema and data from database..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.ErrorExtractAllTableDataTrueAndTablesNotNull">
            <summary>
              Looks up a localized string similar to Argument &apos;ExtractAllTableData&apos; has an invalid value:&apos;true&apos;. &apos;ExtractAllTableData&apos; cannot be &apos;true&apos; because individual user tables are also specified using the &apos;TableData&apos; argument. Set &apos;ExtractAllTableData&apos; to &apos;false&apos; to extract data from the specified user tables..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.ErrorExtractingFromFileTable">
            <summary>
              Looks up a localized string similar to Extracting data from FileTable {0}.{1} is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.ErrorExtractingFromMasterUnsupported">
            <summary>
              Looks up a localized string similar to Extracting the master database is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.ErrorExtractingPackageFromDatabase">
            <summary>
              Looks up a localized string similar to Could not extract package from specified database..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.ErrorForeignKeyCannotReferenceTable">
            <summary>
              Looks up a localized string similar to Foreign key {0} cannot reference table {1} when used as part of a data package..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.ErrorFoundUnsupportedElementsForDataPackage">
            <summary>
              Looks up a localized string similar to One or more unsupported elements were found in the schema used as part of a data package..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.ErrorGeneratingDeploymentReport">
            <summary>
              Looks up a localized string similar to Could not generate deployment report..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.ErrorGeneratingDeploymentScript">
            <summary>
              Looks up a localized string similar to Could not generate deployment script..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.ErrorGeneratingDriftReport">
            <summary>
              Looks up a localized string similar to Could not generate drift report..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.ErrorImportingPackage">
            <summary>
              Looks up a localized string similar to Could not import package..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.ErrorInvalidPropertyName">
            <summary>
              Looks up a localized string similar to The property {0} specified is not present in the resource {1}..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.ErrorLoadingConstraints">
            <summary>
              Looks up a localized string similar to Error loading constraint information from target database.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.ErrorLoadingPackage">
            <summary>
              Looks up a localized string similar to Could not load package..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.ErrorLoadingPackageFrom">
            <summary>
              Looks up a localized string similar to Could not load package from &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.ErrorReadingDacMetadataFromPackage">
            <summary>
              Looks up a localized string similar to Could not load data-tier application metadata from package..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.ErrorReadingModelFromPackage">
            <summary>
              Looks up a localized string similar to Could not load schema model from package..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.ErrorReadingModelHeader">
            <summary>
              Looks up a localized string similar to Could not read schema model header information from package..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.ErrorReadingProfile">
            <summary>
              Looks up a localized string similar to Could not read profile properties: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.ErrorReadingProfileProperties">
            <summary>
              Looks up a localized string similar to Could not read profile properties: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.ErrorReadingScriptFromPackage">
            <summary>
              Looks up a localized string similar to Could not load script from package..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.ErrorRegisteringApplication">
            <summary>
              Looks up a localized string similar to Could not register DAC information..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.ErrorSavingPackage">
            <summary>
              Looks up a localized string similar to Could not save package to file..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.ErrorStreamDoesNotSupportReading">
            <summary>
              Looks up a localized string similar to Stream does not support reading..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.ErrorStreamDoesNotSupportSeeking">
            <summary>
              Looks up a localized string similar to Stream does not support seeking..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.ErrorStreamDoesNotSupportWriting">
            <summary>
              Looks up a localized string similar to Stream does not support writing..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.ErrorTranslatingPackage">
            <summary>
              Looks up a localized string similar to Could not translate package..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.ErrorUnpacking_FileExists">
            <summary>
              Looks up a localized string similar to Cannot unpack to the same location twice. The file &apos;{0}&apos; already exists in the unpack directory.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.ErrorUnpackingPackage">
            <summary>
              Looks up a localized string similar to Could not unpack the package..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.ErrorUnregisteringApplication">
            <summary>
              Looks up a localized string similar to Could not unregister DAC information..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.ErrorUnsupportedClrElementForDataPackage">
            <summary>
              Looks up a localized string similar to Element {0} is an unsupported CLR element that is not allowed when used as part of a data package..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.ErrorUnsupportedContainedUserElementForDataPackage">
            <summary>
              Looks up a localized string similar to Element {0} is a contained user that is not supported when used as a part of a data package..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.ErrorUnsupportedElementForDataPackage">
            <summary>
              Looks up a localized string similar to The element {0} is not supported when used as part of a data package (.bacpac file)..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.ErrorUnsupportedElementPropertyForDataPackage">
            <summary>
              Looks up a localized string similar to Element {0} has an unsupported property {1} set and is not supported when used as part of a data package..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.ErrorUnsupportedFileStreamColumnForDataPackage">
            <summary>
              Looks up a localized string similar to Element {0} is an unsupported FILESTREAM column that is not allowed when used as part of a data package..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.ErrorUnsupportedMultiPartNameForSynonym">
            <summary>
              Looks up a localized string similar to {0} is not supported on Microsoft Azure SQL Database as it aliases the external element {1}..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.ErrorUnsupportUserDefinedTypeColumnForDataPackage">
            <summary>
              Looks up a localized string similar to Element {0} is an unsupported CLR User-defined type column that is not allowed when used as part of a data package..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.ErrorUpdatingDacHistory">
            <summary>
              Looks up a localized string similar to Could not update the dac history table..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.ErrorValidationFailed">
            <summary>
              Looks up a localized string similar to Validation of the schema model for data package failed..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.ErrorVerifyingDeploymentPlan">
            <summary>
              Looks up a localized string similar to Verification of the deployment plan failed..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.ExportedRowsMayBeIncomplete">
            <summary>
              Looks up a localized string similar to The row-level security policies of this database restrict some users&apos; ability to access data in these tables: &apos;{0}&apos;. Please verify that the credentials you&apos;re using have sufficient privileges to access all the data in these tables..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.ExportedRowsMayContainSomeMaskedData">
            <summary>
              Looks up a localized string similar to The database permissions may restrict the ability of some users&apos; to see the actual data contained in these tables: &apos;{0}&apos;. Please verify that the credentials you&apos;re using have sufficient privileges to see all data unmasked..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.InvalidArgumentValue">
            <summary>
              Looks up a localized string similar to {0} is not a valid value for {1}..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.InvalidModelHeaderData">
            <summary>
              Looks up a localized string similar to The model header data from the package &apos;{0}&apos; is invalid..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.PackagingModelFailed">
            <summary>
              Looks up a localized string similar to Packaging the model failed..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.ReferencedPackageDoesnotExist">
            <summary>
              Looks up a localized string similar to The referenced package &apos;{0}&apos; doesn&apos;t exist..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.TranslatingModelFailed">
            <summary>
              Looks up a localized string similar to Translating the model failed..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.UnknownPackageVersion">
            <summary>
              Looks up a localized string similar to The version of the supplied package, {0}, is incompatible with this version of the DAC Framework..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacErrorResources.ValidatingTheModelAgainstTargetPlatformFailed">
            <summary>
              Looks up a localized string similar to Validating the model against target platform failed..
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.DacExceptionMessage">
            <summary>
            Data associated with an error with exception information.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacExceptionMessage.Exception">
            <summary>
            Get exception associated with the event message.
            </summary>
            <value>
            Exception object associated with the message.
            </value>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.DacAzureEdition">
            <summary>
            List of possible editions for a Microsoft Azure SQL Database
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.DacAzureEdition.Web">
            <summary>
            CREATE DATABASE database_name EDITION = <b>'web'</b>
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.DacAzureEdition.Business">
            <summary>
            CREATE DATABASE database_name EDITION = <b>'business'</b>
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.DacAzureEdition.Basic">
            <summary>
            CREATE DATABASE database_name EDITION = <b>'basic'</b>
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.DacAzureEdition.Standard">
            <summary>
            CREATE DATABASE database_name EDITION = <b>'standard'</b>
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.DacAzureEdition.Premium">
            <summary>
            CREATE DATABASE database_name EDITION = <b>'premium'</b>
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.DacAzureEdition.Default">
            <summary>
            CREATE DATABASE database_name
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.DacAzureDatabaseSpecification">
            <summary>
            Defines optional parameters specific to a Microsoft Azure SQL Database
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.DacAzureDatabaseSpecification.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacAzureDatabaseSpecification.Edition">
            <summary>
            Database Edition
            </summary>
            <remarks>
            CREATE DATABASE database_name  [ COLLATE collation_name ]
            {
               ({edition_options} [, ...n]) 
            }
            
            {edition_options} ::= 
            {
               (MAXSIZE = { 100 MB | 500 MB | 1 | 5 | 10 | 20 | 30 ... 150 ... 500 } GB
                |<b>(EDITION = {'web' | 'business' | 'basic' | 'standard' | 'premium'})</b>
                |<b>(SERVICE_OBJECTIVE = { 'shared' | 'basic' | 'S0' | 'S1' | 'S2' | 'S3' | 'P1' | 'P2' | 'P3' | 'P4' | 'P6' | 'P11' })</b>
            }
            </remarks>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacAzureDatabaseSpecification.MaximumSize">
            <summary>
            Maximum size, in GB
            </summary>
            <remarks>
            CREATE DATABASE database_name  [ COLLATE collation_name ]
            {
               ({edition_options} [, ...n]) 
            }
            
            {edition_options} ::= 
            {
               <b>(MAXSIZE = { 100 MB | 500 MB | 1 | 5 | 10 | 20 | 30 ... 150 ... 500 } GB</b>
                |(EDITION = {'web' | 'business' | 'basic' | 'standard' | 'premium'})
                |(SERVICE_OBJECTIVE = { 'shared' | 'basic' | 'S0' | 'S1' | 'S2' | 'S3' | 'P1' | 'P2' | 'P3' | 'P4' | 'P6' | 'P11' })
            }
            </remarks>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacAzureDatabaseSpecification.ServiceObjective">
            <summary>
            Database Performance Level
            </summary>
            <remarks>
            CREATE DATABASE database_name  [ COLLATE collation_name ]
            {
               ({edition_options} [, ...n]) 
            }
            
            {edition_options} ::= 
            {
               (MAXSIZE = { 100 MB | 500 MB | 1 | 5 | 10 | 20 | 30 ... 150 ... 500 } GB  
                |(EDITION = {'web' | 'business' | 'basic' | 'standard' | 'premium'})
                |<b>(SERVICE_OBJECTIVE = { 'shared' | 'basic' | 'S0' | 'S1' | 'S2' | 'S3' | 'P1' | 'P2' | 'P3' | 'P4' | 'P6' | 'P11' })</b>
            }
            </remarks>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.DacExtractOptions">
            <summary>
            Defines options that affect the behavior of package extraction.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.DacExtractOptions.#ctor">
            <summary>
            Construct a new instance of the <see cref="T:Microsoft.SqlServer.Dac.DacExtractOptions"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacExtractOptions.CommandTimeout">
            <summary>
            Specifies the command timeout in seconds when executing queries against SQLServer.
            </summary>
            <value>
            The command timeout in seconds.
            Default is 60
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacExtractOptions.ExtractAllTableData">
            <summary>
            Get or set boolean that specifies whether data for all user tables will be extracted.
            </summary>
            <value>
            True if data for all user tables will be extracted; otherwise false.
            Default value is false.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacExtractOptions.ExtractReferencedServerScopedElements">
            <summary>
            Get or set boolean that specifies whether server-scoped elements referenced by the source should be extracted.
            </summary>
            <value>
            True if references server-scoped elements should be extracted; otherwise false.
            Default value is true.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacExtractOptions.ExtractApplicationScopedObjectsOnly">
            <summary>
            Get or set boolean that specifies the scope of objects extracted from the source.
            </summary>
            <value>
            True if only application-scoped objects should be extracted;
            otherwise false to extract all object types.
            Default value is true.
            </value>        
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacExtractOptions.IgnoreExtendedProperties">
            <summary>
            Get or set boolean that specifies whether extended properties should be ignored.
            </summary>
            <value>
            True if extended properties will be ignored; otherwise false.
            Default value is false.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacExtractOptions.IgnorePermissions">
            <summary>
            Get or set boolean that specifies whether permissions should be ignored.
            </summary>
            <value>
            True if permissions will be ignored; otherwise false.
            Default value is true.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacExtractOptions.IgnoreUserLoginMappings">
            <summary>
            Get or set boolean that specifies whether mappings between users and logins should be extracted from the source.
            </summary>
            <value>
            True if user login mappings will be ignored; otherwise false.
            Default value is false.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacExtractOptions.Storage">
            <summary>
            Get the type of backing storage for the schema model used during extraction.
            </summary>
            <value>
            Enumeration value that specifies the type of backing storage for the schema model used during extraction.
            Default value is File.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacExtractOptions.VerifyExtraction">
            <summary>
            Get or set boolean that specifies whether the extracted package should be verified.
            </summary>
            <value>
            True if the package should be verified; otherwise false.
            Default value is false.
            </value> 
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacExtractOptions.ExtractUsageProperties">
            <summary>
            Usage properties include Table.RowCount, Table.IndexSize, Table.DataSize, Table.UsedPages and Table.DataPages.
            When true, these properties are extracted from the database and are accessible in the model.
            </summary>
            <value>
            True if usage properties will be extracted; otherwise false.
            Default value is false.
            </value>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.DacMessageEventArgs">
            <summary>
            Data associated with event raised as an executing operation reports status updates or errors.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacMessageEventArgs.Message">
            <summary>
            Message information associated with this event instance.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.DacMessageType">
            <summary>
            Specifies the type (or severity) of message associated with a given event.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.DacMessageType.Message">
            <summary>
            Informational message.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.DacMessageType.Warning">
            <summary>
            Noncritical problem.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.DacMessageType.Error">
            <summary>
            Serious, possibly fatal issue.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.DacOperationStatus">
            <summary>
            Specifies the state of a service operation.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.DacOperationStatus.Pending">
            <summary>
            Operation has not yet started.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.DacOperationStatus.Running">
            <summary>
            Operation is executing.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.DacOperationStatus.Completed">
            <summary>
            Operation has finished execution.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.DacOperationStatus.Faulted">
            <summary>
            Operation did not complete execution.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.DacOperationStatus.Cancelled">
            <summary>
            Operation was cancelled.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.DacPackage">
            <summary>
            Representation of the artifact that contains the definition of a data-tier application.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.DacPackage.Dispose">
            <summary>
            Release the resources held by this instance.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.DacPackage.Unpack(System.String)">
            <summary>
            Place the contents of this package into the directory specified by <paramref name="directoryPath"/>.
            </summary>
            <param name="directoryPath">
            Base directory in which to place the package contents.
            </param>
            <exception cref="T:System.ArgumentException">
            If <paramref name="directoryPath"/> is a null reference or empty string.
            </exception>
            <exception cref="T:Microsoft.SqlServer.Dac.DacServicesException">
            If an error occurs while attempting to unpack the package.
            </exception>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.DacPackage.Unpack(Microsoft.SqlServer.Dac.IPackageSource,System.String)">
            <summary>
            Place the contents of this package into the directory specified by <paramref name="directoryPath"/>.
            </summary>
            <param name="packageSource">
            Object used to access package content.
            </param>
            <param name="directoryPath">
            Base directory in which to place the package contents.
            </param>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.DacPackage.Load(System.String)">
            <summary>
            Load a package file specified by <paramref name="fileName"/>.
            </summary>
            <param name="fileName">
            Path to the package file.
            </param>
            <returns>
            <see cref="T:Microsoft.SqlServer.Dac.DacPackage"/> instance that represents the package loaded from the specified file.
            </returns>
            <exception cref="T:Microsoft.SqlServer.Dac.DacServicesException">
            If there is a problem reading the package; or if the package contains exported data.
            </exception>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.DacPackage.Load(System.String,Microsoft.SqlServer.Dac.DacSchemaModelStorageType)">
            <summary>
            Load a package file specified by <paramref name="fileName"/>.
            </summary>
            <param name="fileName">
            Path to the package file.
            </param>
            <param name="modelStorageType">
            Backing storage type for package instance.
            </param>
            <returns>
            <see cref="T:Microsoft.SqlServer.Dac.DacPackage"/> instance that represents the package loaded from the specified file.
            </returns>
            <exception cref="T:Microsoft.SqlServer.Dac.DacServicesException">
            If there is a problem reading the package; or if the package contains exported data.
            </exception>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.DacPackage.Load(System.String,Microsoft.SqlServer.Dac.DacSchemaModelStorageType,System.IO.FileAccess)">
            <summary>
            Load a package file specified by <paramref name="fileName"/>.
            </summary>
            <param name="fileName">
            Path to the package file.
            </param>
            <param name="modelStorageType">
            Backing storage type for package instance.
            </param>
            <param name="packageAccess">
            The access in which to open the package. Valid values are <see cref="F:System.IO.FileAccess.Read"/> or <see cref="F:System.IO.FileAccess.ReadWrite"/>.
            </param>
            <returns>
            <see cref="T:Microsoft.SqlServer.Dac.DacPackage"/> instance that represents the package loaded from the specified file.
            </returns>
            <exception cref="T:Microsoft.SqlServer.Dac.DacServicesException">
            If there is a problem reading the package; or if the package contains exported data.
            </exception>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.DacPackage.Load(System.IO.Stream)">
            <summary>
            Load a package from the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">
            Stream from which to read the package.
            </param>
            <returns>
            <see cref="T:Microsoft.SqlServer.Dac.DacPackage"/> instance that represents the package loaded from the specified <see cref="T:System.IO.Stream"/>.
            </returns>
            <exception cref="T:Microsoft.SqlServer.Dac.DacServicesException">
            If there is a problem reading the package; or if the package contains exported data.
            </exception>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.DacPackage.Load(System.IO.Stream,Microsoft.SqlServer.Dac.DacSchemaModelStorageType)">
            <summary>
            Load a package from the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">
            Stream from which to read the package.
            </param>
            <param name="modelStorageType">
            Backing storage type for package instance.
            </param>
            <returns>
            <see cref="T:Microsoft.SqlServer.Dac.DacPackage"/> instance that represents the package loaded from the specified <see cref="T:System.IO.Stream"/>.
            </returns>
            <exception cref="T:Microsoft.SqlServer.Dac.DacServicesException">
            If there is a problem reading the package; or if the package contains exported data.
            </exception>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.DacPackage.Load(System.IO.Stream,Microsoft.SqlServer.Dac.DacSchemaModelStorageType,System.IO.FileAccess)">
            <summary>
            Load a package from the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">
            Stream from which to read the package.
            </param>
            <param name="modelStorageType">
            Backing storage type for package instance.
            </param>
            <param name="packageAccess">
            The access in which to open the package. Valid values are <see cref="F:System.IO.FileAccess.Read"/> or <see cref="F:System.IO.FileAccess.ReadWrite"/>.
            </param>
            <returns>
            <see cref="T:Microsoft.SqlServer.Dac.DacPackage"/> instance that represents the package loaded from the specified <see cref="T:System.IO.Stream"/>.
            </returns>
            <exception cref="T:Microsoft.SqlServer.Dac.DacServicesException">
            If there is a problem reading the package; or if the package contains exported data.
            </exception>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.DacPackage.Save(System.IO.Stream,Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel,Microsoft.Data.Tools.Schema.Sql.Dac.DacMetadata,System.Nullable{System.UInt32})">
            <summary>
            Write package with the supplied schema model and DAC metadata to the supplied <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">
            <see cref="T:System.IO.Stream"/> to which to write the package.
            </param>
            <param name="model">
            Schema model to be serialized into package.
            </param>
            <param name="metadata">
            DAC metadata to be serialized into package.
            </param>
            <param name="minModelVersion">
            Optional minimum model schema version to use when saving model.
            </param>
            <returns>The model version used for the serialization</returns>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacPackage.Name">
            <summary>
            Get identifier for this package.
            </summary>
            <value>
            String identifier for this package.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacPackage.Description">
            <summary>
            Get an optional summary of this package.
            </summary>
            <value>
            String summary of this package; or null reference if there is no summary.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacPackage.Version">
            <summary>
            Get version information for this package.
            </summary>
            <value>
            <see cref="P:Microsoft.SqlServer.Dac.DacPackage.Version"/> structure that specifies the version information for this package.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacPackage.PreDeploymentScript">
            <summary>
            Get stream used to read and write script executed prior to deploying schema contained in this package.
            </summary>
            <value>
            <see cref="T:System.IO.Stream"/> instance used to read and write script contents.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacPackage.PostDeploymentScript">
            <summary>
            Get stream used to read and write script executed after deploying schema contained in this package.
            </summary>
            <value>
            <see cref="T:System.IO.Stream"/> instance used to read and write script contents.
            </value>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.DacProfile">
            <summary>
            Contains settings related to a specific deployment configuration.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.DacProfile.#ctor">
            <summary>
            Construct a new instance of the <see cref="T:Microsoft.SqlServer.Dac.DacProfile"/> class with a default set of deployment options.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.DacProfile.Load(System.String)">
            <summary>
            Create a <see cref="T:Microsoft.SqlServer.Dac.DacProfile"/> instance by reading serialized profile data from the specified file.
            </summary>
            <param name="fileName">
            Path to file with serialized profile data.
            </param>
            <returns>
            <see cref="T:Microsoft.SqlServer.Dac.DacProfile"/> instance initialized from the serialized file data.
            </returns>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.DacProfile.Load(System.IO.Stream)">
            <summary>
            Create a <see cref="T:Microsoft.SqlServer.Dac.DacProfile"/> instance by reading serialized profile data from the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">
            Stream from which to read serialized profile data.
            </param>
            <returns>
            <see cref="T:Microsoft.SqlServer.Dac.DacProfile"/> instance initialized from the serialized file data.
            </returns>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.DacProfile.LoadImpl(System.Func{Microsoft.Data.Tools.Schema.Sql.Deployment.PublishProfileSerializer})">
            <summary>
            Create a <see cref="T:Microsoft.SqlServer.Dac.DacProfile"/> instance by reading serialized profile data from the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="serializerProvider">
            Provider that creates serializer from which to read parsed profile data.
            </param>
            <returns>
            <see cref="T:Microsoft.SqlServer.Dac.DacProfile"/> instance initialized from the serialized file data.
            </returns>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacProfile.DeployOptions">
            <summary>
            Get deployment options associated with this profile.
            </summary>
            <value>
            <see cref="T:Microsoft.SqlServer.Dac.DacDeployOptions"/> instance that specifies deployment options.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacProfile.TargetDatabaseName">
            <summary>
            Get or set name of database used as the target of a deployment.
            </summary>
            <value>
            String name of target database.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacProfile.TargetConnectionString">
            <summary>
            Get or set connection string for database server used as the target of a deployment.
            </summary>
            <value>
            String that specifies database server connection information.
            </value>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.DacProgressEventArgs">
            <summary>
            Data associated with event raised as an executing operation completes individual steps of processing.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacProgressEventArgs.Status">
            <summary>
            Get status of an active operation.
            </summary>
            <value>
            <see cref="T:Microsoft.SqlServer.Dac.DacOperationStatus"/> enumeration value that specifies the current status of an operation.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacProgressEventArgs.Message">
            <summary>
            Get a friendly message associated with the current step of an operation.
            </summary>
            <value>
            String message associated with the current step of an operation.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacProgressEventArgs.OperationId">
            <summary>
            Gets the ID of the top level task the progress event relates to.
            </summary>
            <remarks>
                <ul>
                <li>Extract = 1</li>
                <li>Publish = 2</li>
                <li>ImportData = 3</li>
                <li>ExportData = 4</li>
                <li>Unregister = 5</li>
                <li>Register = 6</li>
                <li>DriftReport = 7</li>
                <li>DeployReport = 8</li>
                <li>Script = 9</li>
                </ul>
            </remarks>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.DacRetryMessage">
            <summary>
            This message is raised when the DacFx API retried a command or connection due to a
            transient error returned by the server.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacRetryMessage.RetryCount">
            <summary>
            The retry count when this error was encountered
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacRetryMessage.ServerErrorNumber">
            <summary>
            The number of the error from SQL Server or 0 if a different 
            exception was encountered (that invoked a retry)
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.DacSchemaModelStorageType">
            <summary>
            Specifies the type of backing storage for a schema model.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.DacSchemaModelStorageType.File">
            <summary>
            Model is back by file-based storage.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.DacSchemaModelStorageType.Memory">
            <summary>
            Model is stored completely in-memory.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.DacServicesException">
            <summary>
            Exception thrown for DAC service errors.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.DacServicesException.#ctor">
            <summary>
            Construct a new instance of the <see cref="T:Microsoft.SqlServer.Dac.DacServicesException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.DacServicesException.#ctor(System.String)">
            <summary>
            Construct a new instance of the <see cref="T:Microsoft.SqlServer.Dac.DacServicesException"/> class with the specified error message.
            </summary>
            <param name="message">
            The message that describes the error.
            </param>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.DacServicesException.#ctor(System.String,System.Exception)">
            <summary>
            Construct a new instance of the <see cref="T:Microsoft.SqlServer.Dac.DacServicesException"/> class with the specified error message 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">
            The message that describes the error.
            </param>
            <param name="innerException">
            The exception that is the cause of the current exception, or a null reference if no inner exception is specified. 
            </param>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.DacServicesException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Write exception information to the supplied <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object.
            </summary>
            <param name="info">
            <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data.
            </param>
            <param name="context">
            <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="info"/> is a null reference.
            </exception>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DacServicesException.Messages">
            <summary>
            Get collection of additional error, warning, and informational messages associated with this exception.
            </summary>
            <value>
            Collection of additional messages associated with this exception.
            </value>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.DacServices">
            <summary>
            Provides operations to create and consume DAC packages represented by <see cref="T:Microsoft.SqlServer.Dac.DacPackage"/> instances.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.DacServices._userConnectionString">
            <summary>
            Connection string supplied by caller.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.DacServices.Initialize">
            <summary>
            Called by classes within the API to initialize any static state
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.DacServices.#ctor(System.String)">
            <summary>
            Construct a new instance of the <see cref="T:Microsoft.SqlServer.Dac.DacServices"/> class
            that operates against the database specified by the supplied connection string.
            </summary>
            <param name="connectionString">
            String that supplies connection information for the database connection used by this instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="connectionString"/> is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the supplied <paramref name="connectionString"/> is not valid.
            </exception>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.DacServices.Extract(System.String,System.String,System.String,System.Version,System.String,System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}},Microsoft.SqlServer.Dac.DacExtractOptions,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Extract the schema from a database into a package.
            </summary>
            <param name="packageFileName">
            Path to the package file to be created.
            </param>
            <param name="databaseName">
            Name of the source database.
            </param>
            <param name="applicationName">
            String identifier for the DAC application.
            </param>
            <param name="applicationVersion">
            Version of the DAC application.
            </param>
            <param name="applicationDescription">
            Optional string summary of the DAC application.
            </param>
            <param name="tables">
            <para>
            Optional enumerable used to retrieve enumerator over set of tables for which reference data should be stored.
            For each <see cref="T:System.Tuple"/> in the enumeration the first item specifies the schema of the table, and the second specifies the base identifier of the table.
            </para>
            <para>
            If the value for this parameter is a null reference, no reference data will be stored.
            </para>
            </param>
            <param name="extractOptions">
            Optional <see cref="T:Microsoft.SqlServer.Dac.DacExtractOptions"/> instance used to specify options that affect the behavior of package extraction.
            </param>
            <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken"/> that can be used to indicate that the operation should be cancelled.
            Use of this object does not guarantee that the operation will be cancelled.
            </param>
            <exception cref="T:System.ArgumentException">
            If <paramref name="applicationName"/> is a null reference or empty string.
            </exception>
            <exception cref="T:Microsoft.SqlServer.Dac.DacServicesException">
            If a problem occurs during package extraction.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            If the <see cref="T:System.Threading.CancellationToken"/> has a cancellation requested and the operation could be cancelled.
            </exception>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.DacServices.Extract(System.IO.Stream,System.String,System.String,System.Version,System.String,System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}},Microsoft.SqlServer.Dac.DacExtractOptions,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Extract the schema from a database into a package.
            </summary>
            <param name="packageStream">
            <see cref="T:System.IO.Stream"/> to which to write the package.
            </param>
            <param name="databaseName">
            Name of the source database.
            </param>
            <param name="applicationName">
            String identifier for the DAC application.
            </param>
            <param name="applicationVersion">
            Version of the DAC application.
            </param>
            <param name="applicationDescription">
            Optional string summary of the DAC application.
            </param>
            <param name="tables">
            <para>
            Optional enumerable used to retrieve enumerator over set of tables for which data should be exported.
            For each <see cref="T:System.Tuple"/> in the enumeration the first item specifies the schema of the table, and the second specifies the base identifier of the table.
            </para>
            <para>
            If the value for this parameter is a null reference, no data will be exported.
            </para>
            </param>
            <param name="extractOptions">
            Optional <see cref="T:Microsoft.SqlServer.Dac.DacExtractOptions"/> instance used to specify options that affect the behavior of package extraction.
            </param>
            <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken"/> that can be used to indicate that the operation should be cancelled.
            Use of this object does not guarantee that the operation will be cancelled.
            </param>
            <exception cref="T:System.ArgumentException">
            If <paramref name="applicationName"/> is a null reference or empty string.
            </exception>
            <exception cref="T:Microsoft.SqlServer.Dac.DacServicesException">
            If a problem occurs during package extraction; or the supplied stream is not suitable for writing the package.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            If the <see cref="T:System.Threading.CancellationToken"/> has a cancellation requested and the operation could be cancelled.
            </exception>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.DacServices.Deploy(Microsoft.SqlServer.Dac.DacPackage,System.String,System.Boolean,Microsoft.SqlServer.Dac.DacDeployOptions,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Deploy the supplied package to a database.
            </summary>
            <param name="package">
            <see cref="T:Microsoft.SqlServer.Dac.DacPackage"/> containing schema to be deployed.
            </param>
            <param name="targetDatabaseName">
            Name of the target database for deployment.
            </param>
            <param name="upgradeExisting">
            True to allow modification of existing database schema in order to match schema contained in source package;
            otherwise false to block modification of existing database.
            If the database does not exist this flag has no effect.
            </param>
            <param name="options">
            Instance of <see cref="T:Microsoft.SqlServer.Dac.DacDeployOptions"/> that specifies properties that affect various aspects of the deployment.
            </param>
            <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken"/> that can be used to indicate that the operation should be cancelled.
            Use of this object does not guarantee that the operation will be cancelled.
            </param>
            <exception cref="T:System.ArgumentException">
            If the value for any of the required parameters is a null reference or an empty string.
            </exception>
            <exception cref="T:Microsoft.SqlServer.Dac.DacServicesException">
            If <paramref name="upgradeExisting"/> is true and the target database exists;
            or if an error occurs during deployment.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            If the <see cref="T:System.Threading.CancellationToken"/> has a cancellation requested and the operation could be cancelled.
            </exception>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.DacServices.GenerateDeployScript(Microsoft.SqlServer.Dac.DacPackage,System.String,Microsoft.SqlServer.Dac.DacDeployOptions,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Create T-SQL script that can be used to deploy the schema of the supplied <see cref="T:Microsoft.SqlServer.Dac.DacPackage"/> to a database.
            </summary>
            <param name="package">
            <see cref="T:Microsoft.SqlServer.Dac.DacPackage"/> containing schema to be deployed.
            </param>
            <param name="targetDatabaseName">
            Name of the target database for deployment.
            </param>
            <param name="options">
            Instance of <see cref="T:Microsoft.SqlServer.Dac.DacDeployOptions"/> that specifies properties that affect various aspects of the deployment script creation.
            </param>
            <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken"/> that can be used to indicate that the operation should be cancelled.
            Use of this object does not guarantee that the operation will be cancelled.
            </param>
            <returns>
            String of T-SQL script used to create or update database schema based on the supplied <see cref="T:Microsoft.SqlServer.Dac.DacPackage"/>.
            </returns>
            <exception cref="T:Microsoft.SqlServer.Dac.DacServicesException">
            If a problem occurs during script generation.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            If the <see cref="T:System.Threading.CancellationToken"/> has a cancellation requested and the operation could be cancelled.
            </exception>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.DacServices.GenerateDeployReport(Microsoft.SqlServer.Dac.DacPackage,System.String,Microsoft.SqlServer.Dac.DacDeployOptions,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Create XML report of the steps needed to deploy the schema of the supplied <see cref="T:Microsoft.SqlServer.Dac.DacPackage"/> to a database.
            </summary>
            <param name="package">
            <see cref="T:Microsoft.SqlServer.Dac.DacPackage"/> containing schema to be deployed.
            </param>
            <param name="targetDatabaseName">
            Name of the target database for deployment.
            </param>
            <param name="options">
            Instance of <see cref="T:Microsoft.SqlServer.Dac.DacDeployOptions"/> that specifies properties that affect various aspects of the deployment report creation.
            </param>
            <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken"/> that can be used to indicate that the operation should be cancelled.
            Use of this object does not guarantee that the operation will be cancelled.
            </param>
            <returns>
            String of XML that details the steps of the package deployment.
            </returns>
            <exception cref="T:Microsoft.SqlServer.Dac.DacServicesException">
            If a problem occurs during report generation.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            If the <see cref="T:System.Threading.CancellationToken"/> has a cancellation requested and the operation could be cancelled.
            </exception>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.DacServices.CreateController(Microsoft.Data.Tools.Schema.Sql.Deployment.SqlDeployment,Microsoft.Data.Tools.Schema.ErrorManager)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.Tools.Schema.Sql.Deployment.IDeploymentController"/>, handling any errors thrown during contstruction
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.DacServices.GenerateDriftReport(System.String,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Create XML report of the drift that has occurred since the database was last registered.
            </summary>
            <param name="targetDatabaseName">
            Name of the target database for deployment.
            </param>
            <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken"/> that can be used to indicate that the operation should be cancelled.
            Use of this object does not guarantee that the operation will be cancelled.
            </param>
            <returns>
            String of XML that details the database drift, or null if the database has not been registered.
            </returns>
            <exception cref="T:Microsoft.SqlServer.Dac.DacServicesException">
            If a problem occurs during report generation.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            If the <see cref="T:System.Threading.CancellationToken"/> has a cancellation requested and the operation could be cancelled.
            </exception>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.DacServices.GenerateDriftReport(System.String,Microsoft.SqlServer.Dac.DacSchemaModelStorageType,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Create XML report of the drift that has occurred since the database was last registered.
            </summary>
            <param name="targetDatabaseName">
            Name of the target database for deployment.
            </param>
            <param name="modelStorageType">
            Specifies the type of backing storage for a schema model.
            </param>
            <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken"/> that can be used to indicate that the operation should be cancelled.
            Use of this object does not guarantee that the operation will be cancelled.
            </param>
            <returns>
            String of XML that details the database drift, or null if the database has not been registered.
            </returns>
            <exception cref="T:Microsoft.SqlServer.Dac.DacServicesException">
            If a problem occurs during report generation.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            If the <see cref="T:System.Threading.CancellationToken"/> has a cancellation requested and the operation could be cancelled.
            </exception>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.DacServices.Register(System.String,System.String,System.Version,System.String)">
            <summary>
            Add DAC registration information for the specified target database.
            </summary>
            <param name="targetDatabaseName">
            Name of the database for which to add registration information.
            </param>
            <param name="applicationName">
            String identifier for the DAC application.
            </param>
            <param name="applicationVersion">
            Version of the DAC application.
            </param>
            <param name="applicationDescription">
            Optional string summary of the DAC application.
            </param>
            <exception cref="T:System.ArgumentException">
            If any of the required arguments are null or zero-length strings.
            </exception>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.DacServices.Register(System.String,Microsoft.SqlServer.Dac.DacSchemaModelStorageType,System.String,System.Version,System.String)">
            <summary>
            Add DAC registration information for the specified target database.
            </summary>
            <param name="targetDatabaseName">
            Name of the database for which to add registration information.
            </param>
            <param name="modelStorageType">
            Specifies the type of backing storage for a schema model.
            </param>
            <param name="applicationName">
            String identifier for the DAC application.
            </param>
            <param name="applicationVersion">
            Version of the DAC application.
            </param>
            <param name="applicationDescription">
            Optional string summary of the DAC application.
            </param>
            <exception cref="T:System.ArgumentException">
            If any of the required arguments are null or zero-length strings.
            </exception>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.DacServices.Unregister(System.String)">
            <summary>
            Remove DAC registration information for the specified target database.
            </summary>
            <param name="targetDatabaseName">
            Name of the database for which to remove registration information.
            </param>
            <exception cref="T:System.ArgumentException">
            If <paramref name="targetDatabaseName"/> is null or a zero-length string.
            </exception>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.DacServices.ExportBacpac(System.String,System.String,System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Extract schema and export data from a database into a "bacpac" package.
            </summary>
            <param name="packageFileName">
            Path of the target package file.
            </param>
            <param name="databaseName">
            Name of the source database.
            </param>
            <param name="tables">
            <para>
            Optional enumerable used to retrieve enumerator over set of tables for which data should be exported.
            For each <see cref="T:System.Tuple"/> in the enumeration the first item specifies the schema of the table, and the second specifies the base identifier of the table.
            </para>
            <para>
            If the value for this parameter is a null reference, data for all tables will be exported.
            </para>
            </param>
            <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken"/> that can be used to indicate that the operation should be cancelled.
            Use of this object does not guarantee that the operation will be cancelled.
            </param>
            <exception cref="T:System.ArgumentException">
            If the value for any of the required parameters is a null reference or an empty string.
            </exception>
            <exception cref="T:Microsoft.SqlServer.Dac.DacServicesException">
            If an error occurs during schema deployment and data export;
            or if <paramref name="tables"/> specifies a table that does not exist in the schema contained in the supplied package.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            If the <see cref="T:System.Threading.CancellationToken"/> has a cancellation requested and the operation could be cancelled.
            </exception>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.DacServices.ExportBacpac(System.String,System.String,Microsoft.SqlServer.Dac.DacSchemaModelStorageType,System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Extract schema and export data from a database into a "bacpac" package.
            </summary>
            <param name="packageFileName">
            Path of the target package file.
            </param>
            <param name="databaseName">
            Name of the source database.
            </param>
            <param name="modelStorageType">
            Specifies the type of backing storage for a schema model.
            </param>
            <param name="tables">
            <para>
            Optional enumerable used to retrieve enumerator over set of tables for which data should be exported.
            For each <see cref="T:System.Tuple"/> in the enumeration the first item specifies the schema of the table, and the second specifies the base identifier of the table.
            </para>
            <para>
            If the value for this parameter is a null reference, data for all tables will be exported.
            </para>
            </param>
            <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken"/> that can be used to indicate that the operation should be cancelled.
            Use of this object does not guarantee that the operation will be cancelled.
            </param>
            <exception cref="T:System.ArgumentException">
            If the value for any of the required parameters is a null reference or an empty string.
            </exception>
            <exception cref="T:Microsoft.SqlServer.Dac.DacServicesException">
            If an error occurs during schema deployment and data export;
            or if <paramref name="tables"/> specifies a table that does not exist in the schema contained in the supplied package.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            If the <see cref="T:System.Threading.CancellationToken"/> has a cancellation requested and the operation could be cancelled.
            </exception>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.DacServices.ExportBacpac(System.String,System.String,Microsoft.SqlServer.Dac.DacExportOptions,System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Extract schema and export data from a database into a "bacpac" package.
            </summary>
            <param name="packageFileName">
            Path of the target package file.
            </param>
            <param name="databaseName">
            Name of the source database.
            </param>
            <param name="options">
             Instance of <see cref="T:Microsoft.SqlServer.Dac.DacExportOptions"/> that specifies properties that affect various aspects of the export.
            </param>
            <param name="tables">
            Optional enumerable used to retrieve enumerator over set of tables for which data should be exported.
            For each <see cref="T:System.Tuple"/> in the enumeration the first item specifies the schema of the table, and the second specifies the base identifier of the table.
            </param>
            <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken"/> that can be used to indicate that the operation should be cancelled.
            Use of this object does not guarantee that the operation will be cancelled.
            </param>
            <exception cref="T:System.ArgumentException">
            If the value for any of the required parameters is a null reference or an empty string.
            </exception>
            <exception cref="T:Microsoft.SqlServer.Dac.DacServicesException">
            If an error occurs during schema deployment and data export;
            or if <paramref name="options"/> specifies a table that does not exist in the schema contained in the supplied package.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            If the <see cref="T:System.Threading.CancellationToken"/> has a cancellation requested and the operation could be cancelled.
            </exception>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.DacServices.ExportBacpac(System.IO.Stream,System.String,System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Extract schema and export data from a database into a "bacpac" package.
            </summary>
            <param name="packageStream">
            <see cref="T:System.IO.Stream"/> to which to write the package.
            </param>
            <param name="databaseName">
            Name of the source database.
            </param>
            <param name="tables">
            <para>
            Optional enumerable used to retrieve enumerator over set of tables for which data should be exported.
            For each <see cref="T:System.Tuple"/> in the enumeration the first item specifies the schema of the table, and the second specifies the base identifier of the table.
            </para>
            <para>
            If the value for this parameter is a null reference, data for all tables will be exported.
            </para>
            </param>
            <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken"/> that can be used to indicate that the operation should be cancelled.
            Use of this object does not guarantee that the operation will be cancelled.
            </param>
            <exception cref="T:System.ArgumentException">
            If the value for any of the required parameters is a null reference or an empty string.
            </exception>
            <exception cref="T:Microsoft.SqlServer.Dac.DacServicesException">
            If an error occurs during schema deployment and data export;
            or if <paramref name="tables"/> specifies a table that does not exist in the schema contained in the supplied package;
            or the supplied stream is not suitable for writing the package.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            If the <see cref="T:System.Threading.CancellationToken"/> has a cancellation requested and the operation could be cancelled.
            </exception>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.DacServices.ExportBacpac(System.IO.Stream,System.String,Microsoft.SqlServer.Dac.DacSchemaModelStorageType,System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Extract schema and export data from a database into a "bacpac" package.
            </summary>
            <param name="packageStream">
            <see cref="T:System.IO.Stream"/> to which to write the package.
            </param>
            <param name="databaseName">
            Name of the source database.
            </param>
            <param name="modelStorageType">
            Specifies the type of backing storage for a schema model.
            </param>
            <param name="tables">
            <para>
            Optional enumerable used to retrieve enumerator over set of tables for which data should be exported.
            For each <see cref="T:System.Tuple"/> in the enumeration the first item specifies the schema of the table, and the second specifies the base identifier of the table.
            </para>
            <para>
            If the value for this parameter is a null reference, data for all tables will be exported.
            </para>
            </param>
            <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken"/> that can be used to indicate that the operation should be cancelled.
            Use of this object does not guarantee that the operation will be cancelled.
            </param>
            <exception cref="T:System.ArgumentException">
            If the value for any of the required parameters is a null reference or an empty string.
            </exception>
            <exception cref="T:Microsoft.SqlServer.Dac.DacServicesException">
            If an error occurs during schema deployment and data export;
            or if <paramref name="tables"/> specifies a table that does not exist in the schema contained in the supplied package;
            or the supplied stream is not suitable for writing the package.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            If the <see cref="T:System.Threading.CancellationToken"/> has a cancellation requested and the operation could be cancelled.
            </exception>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.DacServices.ExportBacpac(System.IO.Stream,System.String,Microsoft.SqlServer.Dac.DacExportOptions,System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Extract schema and export data from a database into a "bacpac" package.
            </summary>
            <param name="packageStream">
            <see cref="T:System.IO.Stream"/> to which to write the package.
            </param>
            <param name="databaseName">
            Name of the source database.
            </param>
            <param name="options">
            Optional instance of <see cref="T:Microsoft.SqlServer.Dac.DacExportOptions"/> that specifies properties that affect various aspects of the export.
            </param>
            <param name="tables">
            Optional enumerable used to retrieve enumerator over set of tables for which data should be exported.
            For each <see cref="T:System.Tuple"/> in the enumeration the first item specifies the schema of the table, and the second specifies the base identifier of the table.
            </param>
            <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken"/> that can be used to indicate that the operation should be cancelled.
            Use of this object does not guarantee that the operation will be cancelled.
            </param>
            <exception cref="T:System.ArgumentException">
            If the value for any of the required parameters is a null reference or an empty string.
            </exception>
            <exception cref="T:Microsoft.SqlServer.Dac.DacServicesException">
            If an error occurs during schema deployment and data export;
            or if <paramref name="options"/> specifies a table that does not exist in the schema contained in the supplied package.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            If the <see cref="T:System.Threading.CancellationToken"/> has a cancellation requested and the operation could be cancelled.
            </exception>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.DacServices.SetAmbientSetting(System.String,System.Object)">
            <summary>
            Populates ambient setting controlling
            deployment/retry behavior down the stack.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.DacServices.CreateSettingsContext(Microsoft.SqlServer.Dac.DacLoggingContext)">
            <summary>
            Sets up a stack context to push a configured settings object to populate
            the ambient settings for consumption further down the stack
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.DacServices.ImportBacpac(Microsoft.SqlServer.Dac.BacPackage,System.String,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Deploy schema and import table data from the supplied package to a database.
            </summary>
            <param name="package">
            <see cref="T:Microsoft.SqlServer.Dac.BacPackage"/> containing schema to be deployed and data to be imported.
            </param>
            <param name="targetDatabaseName">
            Name of the target database for deployment.
            </param>
            <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken"/> that can be used to indicate that the operation should be cancelled.
            Use of this object does not guarantee that the operation will be cancelled.
            </param>
            <exception cref="T:System.ArgumentException">
            If the value for any of the required parameters is a null reference or an empty string.
            </exception>
            <exception cref="T:Microsoft.SqlServer.Dac.DacServicesException">
            If an error occurs during schema deployment and data import.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            If the <see cref="T:System.Threading.CancellationToken"/> has a cancellation requested and the operation could be cancelled.
            </exception>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.DacServices.ImportBacpac(Microsoft.SqlServer.Dac.BacPackage,System.String,Microsoft.SqlServer.Dac.DacAzureDatabaseSpecification,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Deploy schema and import table data from the supplied package to a database.
            </summary>
            <param name="package">
            <see cref="T:Microsoft.SqlServer.Dac.BacPackage"/> containing schema to be deployed and data to be imported.
            </param>
            <param name="targetDatabaseName">
            Name of the target database for deployment.
            </param>
            <param name="creationDefaults">
            Optional default size and edition parameters used when creating a new Azure database.
            </param>
            <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken"/> that can be used to indicate that the operation should be cancelled.
            Use of this object does not guarantee that the operation will be cancelled.
            </param>
            <exception cref="T:System.ArgumentException">
            If the value for any of the required parameters is a null reference or an empty string.
            </exception>
            <exception cref="T:Microsoft.SqlServer.Dac.DacServicesException">
            If an error occurs during schema deployment and data import.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            If the <see cref="T:System.Threading.CancellationToken"/> has a cancellation requested and the operation could be cancelled.
            </exception>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.DacServices.ImportBacpac(Microsoft.SqlServer.Dac.BacPackage,System.String,Microsoft.SqlServer.Dac.DacImportOptions,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Deploy schema and import table data from the supplied package to a database.
            </summary>
            <param name="package">
            <see cref="T:Microsoft.SqlServer.Dac.BacPackage"/> containing schema to be deployed and data to be imported.
            </param>
            <param name="targetDatabaseName">
            Name of the target database for deployment.
            </param>
            <param name="importOptions">
             Instance of <see cref="T:Microsoft.SqlServer.Dac.DacImportOptions"/> that specifies properties that affect various aspects of the import.
            </param>
            <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken"/> that can be used to indicate that the operation should be cancelled.
            Use of this object does not guarantee that the operation will be cancelled.
            </param>
            <exception cref="T:System.ArgumentException">
            If the value for any of the required parameters is a null reference or an empty string.
            </exception>
            <exception cref="T:Microsoft.SqlServer.Dac.DacServicesException">
            If an error occurs during schema deployment and data import.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            If the <see cref="T:System.Threading.CancellationToken"/> has a cancellation requested and the operation could be cancelled.
            </exception>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.DacServices.SafeFileStreamGetter(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.String)">
            <summary>
            Return FileStream after handling all acceptable exceptions.
            </summary>
            <param name="path">File path.</param>
            <param name="mode">File mode.</param>
            <param name="access">File access.</param>
            <param name="share">File share.</param>
            <param name="handledExceptionMessage">Message for handled exception.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.DacServices.GenerateCreateScript(Microsoft.SqlServer.Dac.DacPackage,System.String,Microsoft.SqlServer.Dac.DacDeployOptions)">
            <summary>
            Create T-SQL script that can be used to deploy the schema of the supplied <see cref="T:Microsoft.SqlServer.Dac.DacPackage"/> to a database.
            </summary>
            <param name="package">
            <see cref="T:Microsoft.SqlServer.Dac.DacPackage"/> containing schema to be deployed.
            </param>
            <param name="targetDatabaseName">
            Name of the target database for deployment.
            </param>
            <param name="options">
            Instance of <see cref="T:Microsoft.SqlServer.Dac.DacDeployOptions"/> that specifies properties that affect various aspects of the deployment script creation.
            </param>
            <returns>
            String of T-SQL script used to create database schema based on the supplied <see cref="T:Microsoft.SqlServer.Dac.DacPackage"/>.
            </returns>
            <exception cref="T:Microsoft.SqlServer.Dac.DacServicesException">
            If a problem occurs during script generation.
            </exception>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.DacServices.GenerateCreateScript(System.IO.Stream,Microsoft.SqlServer.Dac.DacPackage,System.String,Microsoft.SqlServer.Dac.DacDeployOptions)">
            <summary>
            Create T-SQL script that can be used to deploy the schema of the supplied <see cref="T:Microsoft.SqlServer.Dac.DacPackage"/> to a database.
            </summary>
            <param name="outputStream">
            <see cref="T:System.IO.Stream"/> to which to write the deployment script.
            </param>
            <param name="package">
            <see cref="T:Microsoft.SqlServer.Dac.DacPackage"/> containing schema to be deployed.
            </param>
            <param name="targetDatabaseName">
            Name of the target database for deployment.
            </param>
            <param name="options">
            Instance of <see cref="T:Microsoft.SqlServer.Dac.DacDeployOptions"/> that specifies properties that affect various aspects of the deployment script creation.
            </param>
            <exception cref="T:Microsoft.SqlServer.Dac.DacServicesException">
            If a problem occurs during script generation.
            </exception>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.DacServices.GenerateDeployScript(Microsoft.SqlServer.Dac.DacPackage,Microsoft.SqlServer.Dac.DacPackage,System.String,Microsoft.SqlServer.Dac.DacDeployOptions)">
            <summary>
            Create T-SQL script that can be used to deploy the differences between the schemas of the supplied source and target <see cref="T:Microsoft.SqlServer.Dac.DacPackage"/> instances to a database.
            </summary>
            <param name="sourcePackage">
            <see cref="T:Microsoft.SqlServer.Dac.DacPackage"/> containing the source schema to be compared.
            </param>
            <param name="targetPackage">
            <see cref="T:Microsoft.SqlServer.Dac.DacPackage"/> containing the target schema to be compared.
            </param>
            <param name="targetDatabaseName">
            Name of the target database for deployment.
            </param>
            <param name="options">
            Instance of <see cref="T:Microsoft.SqlServer.Dac.DacDeployOptions"/> that specifies properties that affect various aspects of the deployment script creation.
            </param>
            <returns>
            String of T-SQL script used to create or update database schema based on the supplied <see cref="T:Microsoft.SqlServer.Dac.DacPackage"/>.
            </returns>
            <exception cref="T:Microsoft.SqlServer.Dac.DacServicesException">
            If a problem occurs during script generation.
            </exception>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.DacServices.GenerateDeployScript(System.IO.Stream,Microsoft.SqlServer.Dac.DacPackage,Microsoft.SqlServer.Dac.DacPackage,System.String,Microsoft.SqlServer.Dac.DacDeployOptions)">
            <summary>
            Create T-SQL script that can be used to deploy the differences between the schemas of the supplied source and target <see cref="T:Microsoft.SqlServer.Dac.DacPackage"/> instances to a database.
            </summary>
            <param name="outputStream">
            <see cref="T:System.IO.Stream"/> to which to write the deployment script.
            </param>
            <param name="sourcePackage">
            <see cref="T:Microsoft.SqlServer.Dac.DacPackage"/> containing the source schema to be compared.
            </param>
            <param name="targetPackage">
            <see cref="T:Microsoft.SqlServer.Dac.DacPackage"/> containing the target schema to be compared.
            </param>
            <param name="targetDatabaseName">
            Name of the target database for deployment.
            </param>
            <param name="options">
            Instance of <see cref="T:Microsoft.SqlServer.Dac.DacDeployOptions"/> that specifies properties that affect various aspects of the deployment script creation.
            </param>
            <exception cref="T:Microsoft.SqlServer.Dac.DacServicesException">
            If a problem occurs during script generation.
            </exception>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.DacServices.GenerateDeployReport(Microsoft.SqlServer.Dac.DacPackage,Microsoft.SqlServer.Dac.DacPackage,System.String,Microsoft.SqlServer.Dac.DacDeployOptions)">
            <summary>
            Create XML report of the steps needed to deploy the differences between the schemas of the supplied source and target <see cref="T:Microsoft.SqlServer.Dac.DacPackage"/> instances to a database.
            </summary>
            <param name="sourcePackage">
            <see cref="T:Microsoft.SqlServer.Dac.DacPackage"/> containing the source schema to be compared.
            </param>
            <param name="targetPackage">
            <see cref="T:Microsoft.SqlServer.Dac.DacPackage"/> containing the target schema to be compared.
            </param>
            <param name="targetDatabaseName">
            Name of the target database for deployment.
            </param>
            <param name="options">
            Instance of <see cref="T:Microsoft.SqlServer.Dac.DacDeployOptions"/> that specifies properties that affect various aspects of the deployment report creation.
            </param>
            <returns>
            String of XML that details the steps of the deployment.
            </returns>
            <exception cref="T:Microsoft.SqlServer.Dac.DacServicesException">
            If a problem occurs during report generation.
            </exception>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.DacServices.GenerateDeployReport(System.IO.Stream,Microsoft.SqlServer.Dac.DacPackage,Microsoft.SqlServer.Dac.DacPackage,System.String,Microsoft.SqlServer.Dac.DacDeployOptions)">
            <summary>
            Create XML report of the steps needed to deploy the differences between the schemas of the supplied source and target <see cref="T:Microsoft.SqlServer.Dac.DacPackage"/> instances to a database.
            </summary>
            <param name="outputStream">
            <see cref="T:System.IO.Stream"/> to which to write the deployment report.
            </param>
            <param name="sourcePackage">
            <see cref="T:Microsoft.SqlServer.Dac.DacPackage"/> containing the source schema to be compared.
            </param>
            <param name="targetPackage">
            <see cref="T:Microsoft.SqlServer.Dac.DacPackage"/> containing the target schema to be compared.
            </param>
            <param name="targetDatabaseName">
            Name of the target database for deployment.
            </param>
            <param name="options">
            Instance of <see cref="T:Microsoft.SqlServer.Dac.DacDeployOptions"/> that specifies properties that affect various aspects of the deployment report creation.
            </param>
            <exception cref="T:Microsoft.SqlServer.Dac.DacServicesException">
            If a problem occurs during report generation.
            </exception>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.DacServices.ParseAndThrowIfUnsupportedConnectionString(System.String)">
            <summary>
            Parses the connection string and determine if supplied connection string is valid and supported by <see cref="T:Microsoft.SqlServer.Dac.DacServices"/>.
            </summary>
            <param name="connectionString">
            Connection string to be validated.
            </param>
            <returns>Parsed connection string with only supported arguments present.</returns>
            <exception cref="T:System.ArgumentException">
            If the supplied <paramref name="connectionString"/> is not valid (as determined by <see cref="T:System.Data.SqlClient.SqlConnectionStringBuilder"/>),
            or if it specifies properties or property values that are not supported by <see cref="T:Microsoft.SqlServer.Dac.DacServices"/>.
            </exception>
        </member>
        <member name="E:Microsoft.SqlServer.Dac.DacServices.ProgressChanged">
            <summary>
            Invoked as the state of an operation changes.
            </summary>
        </member>
        <member name="E:Microsoft.SqlServer.Dac.DacServices.Message">
            <summary>
            Invoked as an operation reports status updates or errors.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.Data.DataException">
            <summary>
            This class is meant to be a public exception class - i.e. when throwing it ensure
            that the exception is meaningful to the end-developer.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.Data.DataResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Data.DataResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Data.DataResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Data.DataResources.CreateTargetModelFailed">
            <summary>
              Looks up a localized string similar to Failed to retrieve information from target database {0}.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Data.DataResources.DataPlanExecutionFailed">
            <summary>
              Looks up a localized string similar to Data plan execution failed with message {0}.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Data.DataResources.FailedDetectDspType">
            <summary>
              Looks up a localized string similar to Failed to retrieve information from target database to correctly model the database.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Data.DataResources.Skipped_SelectedColumn">
            <summary>
              Looks up a localized string similar to Excluded column [{0}].[{1}].[{2}] does not exist in the source model..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Data.DataResources.Skipped_SelectedTable">
            <summary>
              Looks up a localized string similar to Selected table [{0}].[{1}] does not have data and will not be populated..
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.Deployment.DatabasePointer">
            <summary>
            Logically represents a database.  Can be used to retrieve information about the database
            such as a model and data
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Deployment.DatabasePointer.AddNewConstraints(Microsoft.Data.Tools.Schema.Sql.Deployment.ConstraintManager,System.Data.SqlClient.SqlConnectionStringBuilder)">
            <summary>
            Adds new constraints to the specified constraint manager.  Will throw a DataException if a error
            occurs with the connection to the DB
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.Deployment.Data.DataDeployment">
            <summary>
            Represents a "top of stack" incremental data deployment engine.  This engine acts primarly as an orchestrator
            between other more fine-grained data deployment components.  It is meant to be a fire-and-dispose component, access to and control of 
            more fine grained components is left to direct manipulation of those components directly to avoid lifetime issues
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Deployment.Data.DataDeploymentOptions.AddSelectedTable(System.Tuple{System.String,System.String})">
            <summary>
            Adds a table to be considered when creating the data deployment plan
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Deployment.Data.DataDeploymentOptions.TableSelectionPolicy">
            <summary>
            Configures how tables will be selected for data deployment
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Deployment.Data.DataDeploymentOptions.StorageType">
            <summary>
            Storage to use when creating models of the source/target databases
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Deployment.Data.DataDeploymentOptions.TargetDatabaseName">
            <summary>
            Name of the target database.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.Deployment.Data.DataPlanHandle">
            <summary>
            This class represents the disposable parts of the deployment plan.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.Deployment.Data.DataPlanStrategy">
            <summary>
            Base class for different data deployment plan generation strategies
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.Deployment.Data.PlanCreationContext">
            <summary>
            A data transfer object used to pass state between components used in plan creation
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Deployment.Data.PlanCreationContext.PopulateIncludedTables(System.Collections.Generic.HashSet{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlElementDescriptor})">
             <summary>
             Called to populate selected data tables and columns based on
             policy specified in the options
            
             Assumption: the Options and Source model are populted before this method is called
             </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.Deployment.PlanExecutor">
            <summary>
            Executes a deployment plan against the specified target database
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.Data.LocalDb.LocalDbInstanceException">
            <summary>
            Thrown by the DeveloperInstanceManager 
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.Data.LocalDb.LocalDbInstanceManager">
            <summary>
            This class encapsulates dealing with the Serverless SQL Express technology SqlStudio uses
            as a default destination for database project deployment 
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Data.LocalDb.LocalDbInstanceManager.CreateLocaldbInstanceName(System.String)">
            <summary>
            Returns a localdb instance named based on the specified named.  The returned
            name is in the format of (localdb)\namePrefix
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Data.LocalDb.LocalDbInstanceManager.CreateInstance(System.String)">
            <summary>
            If necessary creates and then starts the specified instance and returns a connection string to connect 
            to master on the specified localdb instance.
            </summary>
            <returns>
            Returns a connection string to connect to the database.  Will throw DeveloperInstanceException
            if localdb is not installed or if an error occurs during creation of the connection string
            </returns>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Data.LocalDb.LocalDbInstanceManager.DetachDatabase(System.String,System.String)">
            <summary>
            If the specified database exists on the instance detach it from the instance.  
            Any connections/transactions open on the database will be closed as part of the detach.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Data.LocalDb.LocalDbInstanceManager.StopInstance(System.String)">
            <summary>
            Stops the specified instance if it is running
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Data.LocalDb.LocalDbInstanceManager.TeardownInstance(System.String)">
            <summary>
            Tears down an instance by stopping and then deleting the specified instance.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Data.LocalDb.LocalDbInstanceManager.CreateConnectionString(System.String)">
            <summary>
            Helper method that creates a connection string to 
            connect to the specified data source
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Data.LocalDb.LocalDbInstanceManager.ThrowCouldNotSetup">
            <summary>
            Helper method that throws the well known "could not setup" exception
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Data.LocalDb.LocalDbInstanceManager.CreateSafeInstanceName(System.String)">
            <summary>
            Helper to create a safe name prefix
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Data.LocalDb.LocalDbInstanceManager.DoesDatabaseExist(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            Helper to check if a database exists
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Data.LocalDb.LocalDbInstanceManager.TestLocaldbConnectivityInstalled(System.String)">
            <summary>
            If not already tested, tests whether the localdb connectivity fix has been 
            installed.  This is a QFE ontop of .net framework 4.0.  It is assumed that the
            instance has already been started.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Data.LocalDb.LocalDbInstanceManager.SetupLocalDBInstance(System.String)">
            <summary>
            Sets up the LocalDB instance.  Returns named pipe if successful
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Data.LocalDb.LocalDbInstanceManager.BeginNewDatabaseWarmup(System.Data.SqlClient.SqlConnectionStringBuilder,System.String)">
            <summary>
            Helper method to "warmup" a new database after it has been created/attached
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Data.LocalDb.LocalDbInstanceManager.BuildCreateDatabase(System.String,System.String,System.String,System.IO.DirectoryInfo,System.IO.DirectoryInfo)">
            <summary>
            Creates an AST that represents a create database statement to create a database
            on a serverless instance
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Data.LocalDb.LocalDbInstanceManager.BuildDetachDatabase(System.String)">
            <summary>
            Builds an AST that will set the specified database to single user and detach it.
            </summary>
            <param name="dbName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Data.LocalDb.LocalDbInstanceManager.BuildDropDatabase(System.String)">
            <summary>
            Creates an AST to drop a database
            </summary>
            <param name="databaseName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Data.LocalDb.LocalDbInstanceManager.ExecuteScript(System.Data.SqlClient.SqlConnection,Microsoft.SqlServer.TransactSql.ScriptDom.TSqlScript)">
            <summary>
            Helper method that executes a set of batches against provided connection
            </summary>
            <param name="conn"></param>
            <param name="script"></param>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Data.LocalDb.LocalDbInstanceManager.LocalDbInstalled">
            <summary>
            Returns true is localDb is install on the user's machine
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.Data.LocalDb.LocalDbInstanceManager.LocalDbWrapper">
            <summary>
            This class encalsulates management of LocalDB instances via the native control .dll
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Data.LocalDb.LocalDbInstanceManager.LocalDbWrapper.Create(System.String)">
            <summary>
            Creates a new LocalDB instance using the specified instance name
            </summary>
            <returns>
            True if the instance was created or already existed
            </returns>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Data.LocalDb.LocalDbInstanceManager.LocalDbWrapper.Start(System.String,System.String@)">
            <summary>
            Starts the specified instance.  
            </summary>
            <param name="instanceName">The name of an instance that was already created</param>
            <param name="namedPipe">The named pipe that can be used to communicate with the instance</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Data.LocalDb.LocalDbInstanceManager.LocalDbWrapper.Stop(System.String)">
            <summary>
            Stops the specified instance
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Data.LocalDb.LocalDbInstanceManager.LocalDbWrapper.Delete(System.String)">
            <summary>
            Deletes the specified instance.  
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Data.LocalDb.LocalDbInstanceManager.LocalDbWrapper.VerifyInstalled">
            <summary>
            Helper method to verify that LocalDB is installed - it will throw if not installed.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Data.LocalDb.LocalDbInstanceManager.LocalDbWrapper.GetFunc``1(Microsoft.SqlServer.Dac.Data.LocalDb.LocalDbInstanceManager.LocalDbWrapper.SafeLibraryHandle,System.String)">
            <summary>
            Helper to return back the specified delegate to PInvoke the specified function
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Data.LocalDb.LocalDbInstanceManager.LocalDbWrapper.TryRetrieveApiLibPath(System.String,System.String@)">
            <summary>
            Helper method that looks in the registry to find the path to the control LocalDB library.
            The control library's constract specifies that the control library must be backwards compatible
            so we always load the latest instance of the control library and then specify the version we
            are conpatible with in subsequent calls into the library.  For instance, we may load LocalDB
            control library 12 and then specify that we want version 11 in a CreateInstance call.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.Data.LocalDb.LocalDbInstanceManager.LocalDbWrapper.Installed">
            <summary>
            Returns true is LocalDB is installed
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.Data.LocalDb.LocalDbInstanceManager.LocalDbWrapper.ReturnCodes">
            <summary>
            Encapsulates return codes from LocalDB
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.Data.LocalDb.LocalDbInstanceManager.LocalDbWrapper.SafeLibraryHandle">
            <summary>
            Wraps the safe handle to the native library
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.Data.LocalDb.LocalDbInstanceManager.LocalDbWrapper.LocalDBApi">
            <summary>
            Encapsulates the delegates that define the signatures of the functions on the control library.  These
            delegates are used to successfully PInvoke into the .dll
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.Data.LocalDb.LocalDbInstanceManager.LocalDbWrapper.LocalDBFunctionNames">
            <summary>
            Encapsulates the names of the functions on the controller .dll
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.Data.LocalDb.LocalDbInstanceManager.LocalDbWrapper.NativeMethods">
            <summary>
            Additional functions that we PInvoke to manage loading the control .dll and
            find the control function addresses.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.DeployOperation.UpdateDatabaseData(Microsoft.Data.Tools.Schema.Sql.Dac.LoggingContext,System.Threading.CancellationToken)">
            <summary>
            Update's the target database's data using the model's / data that has already be created.  Assumption - this
            method is called after the controller has been initialized and used to update the target database
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.DeployOperation.SnapshotConstraintState">
            <summary>
            Snapshots constraint state in the target database prior to the database being updated
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.EngineVersion">
            <summary>
            Represents an option specifying what engine version should be set or allowed.
            Currently this option is only used in operations related to Microsoft Azure SQL Database.
            
            For instance this can be used during export to define the allowed engine version to validate against
            and whether the features of the database match the capabilities of that engine version.
            
            Similarly when defining creation options for a public TSqlModel in the extensibility APIs, this can be
            used to define what the expected engine version of the model should be set to.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.EngineVersion.Default">
            <summary>
            Use the default engine version when creating the model.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.EngineVersion.Latest">
            <summary>
            Use the latest engine version when creating the model. 
            This will always attempt to set the highest supported engine version as the
            target, and will mean that the model will allow the latest set of T-SQL language
            features to be supported 
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.EngineVersion.V11">
            <summary>
            Version 11 
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.EngineVersion.V12">
            <summary>
            Version 12
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.Extensions.DacExtensions">
            <summary>
            Provides extensions for interacting with DAC packages represented by <see cref="T:Microsoft.SqlServer.Dac.DacPackage"/> or <see cref="T:Microsoft.SqlServer.Dac.BacPackage"/> instances.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensions.DacExtensions.GetCollationString(Microsoft.SqlServer.Dac.DacPackage)">
            <summary>
            Returns the database collation for the package.
            </summary>
            <param name="package">
            <see cref="T:Microsoft.SqlServer.Dac.DacPackage"/> containing collation information.
            </param>
            <returns>
            The SQL Server collation string, or null if the collation cannot be retrieved.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the value for any of the required parameters is a null reference.
            </exception>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensions.DacExtensions.GetCollationString(Microsoft.SqlServer.Dac.BacPackage)">
            <summary>
            Returns the database collation for the package.
            </summary>
            <param name="package">
            <see cref="T:Microsoft.SqlServer.Dac.BacPackage"/> containing collation information.
            </param>
            <returns>
            The SQL Server collation string, or null if the collation cannot be retrieved.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the value for any of the required parameters is a null reference.
            </exception>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Extensions.DacExtensions.SetServiceSetting(Microsoft.SqlServer.Dac.DacServices,System.String,System.Object)">
            <summary>
            Configures a setting on the supplied DacServices instance.
            </summary>
            <param name="service">The services instance to apply the setting</param>
            <param name="settingName">The name of the setting</param>
            <param name="settingValue">The value of the setting or null to remove the setting</param>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.ExtractOperation.SchemaModel">
            <summary>
            Get <see cref="T:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel"/> instance that represents the extracted database schema.
            </summary>
            <value>
            <see cref="T:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel"/> instance created from extracted database schema.
            </value>
            <remarks>
            Use this property after executing this operation to retrieve the resulting model.
            Callers must handle disposal of this instance, as its lifetime is not managed by this class.
            </remarks>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.ModelValidation.CheckForUnsupportedAzureV1SchemaForBacpacData(Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel,System.Collections.Generic.IEnumerable{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTableBase},System.Threading.CancellationToken,System.Action{Microsoft.SqlServer.Dac.DacMessage})">
            <summary>
            Determine if the supplied schema model contains any elements that are problematic
            when used with a package that contains data.
            </summary>
            <param name="model">
            <see cref="T:Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel"/> to query for elements.
            </param>
            <param name="tables">
            Enumerable of data tables.
            </param>
            <param name="cancellationToken">
            <see cref="T:System.Threading.CancellationToken"/> that can be used to indicate that the operation should be cancelled.
            Use of this object does not guarantee that the operation will be cancelled.
            </param>
            <param name="errorHandler">
            Callback invoked when problematic elements are identified.
            A <see cref="T:Microsoft.SqlServer.Dac.DacMessage"/> instance is supplied that contains the details for the unsupported element.
            </param>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.ModelValidation.CheckForSecurityPolicy(Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel,System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTableBase},Microsoft.SqlServer.Dac.DacLoggingContext)">
            <summary>
            For platforms that support row-level security the exported rows set may be incomplete if the user
            is exporting a package under a database account that doesn't have enough privileges. Issue a warning
            so users can be aware of this situation
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.ModelValidation.CheckForUnmaskPermissionsNeeded(Microsoft.Data.Tools.Schema.SchemaModel.DataSchemaModel,System.Collections.Generic.IList{Microsoft.Data.Tools.Schema.Sql.SchemaModel.SqlTableBase},Microsoft.SqlServer.Dac.DacLoggingContext)">
            <summary>
            For platforms that support data masking the exported rows set may contain some masked data if the user
            is exporting a package under a database account that doesn't have enough privileges (UNMASK permission).
            Issue a warning so users can be aware of this situation.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.ObjectType">
            <summary>
            Defines object types that exist in SQL Server.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.ObjectType.Aggregates">
            <summary>
            Aggregate objects
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.ObjectType.ApplicationRoles">
            <summary>
            Application role objects
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.ObjectType.Assemblies">
            <summary>
            Assembly objects
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.ObjectType.AsymmetricKeys">
            <summary>
            Asymmetric key objects
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.ObjectType.BrokerPriorities">
            <summary>
            Broker priority objects
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.ObjectType.Certificates">
            <summary>
            Certificate objects
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.ObjectType.ColumnEncryptionKeys">
            <summary>
            Always Encrypted column encryption key objects
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.ObjectType.ColumnMasterKeys">
            <summary>
            Always Encrypted column master key objects
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.ObjectType.Contracts">
            <summary>
            Contract objects
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.ObjectType.DatabaseRoles">
            <summary>
            Database role objects
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.ObjectType.DatabaseTriggers">
            <summary>
            Database DDL trigger objects
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.ObjectType.Defaults">
            <summary>
            Default objects
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.ObjectType.ExtendedProperties">
            <summary>
            Extended property objects
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.ObjectType.ExternalDataSources">
            <summary>
            External data source objects
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.ObjectType.ExternalFileFormats">
            <summary>
            External file format objects
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.ObjectType.ExternalTables">
            <summary>
            External table objects
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.ObjectType.Filegroups">
            <summary>
            Filegroup objects
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.ObjectType.FileTables">
            <summary>
            FileTable objects
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.ObjectType.FullTextCatalogs">
            <summary>
            Full-text catalog objects
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.ObjectType.FullTextStoplists">
            <summary>
            Full-text stoplist objects
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.ObjectType.MessageTypes">
            <summary>
            Message type objects
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.ObjectType.PartitionFunctions">
            <summary>
            Partition function objects
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.ObjectType.PartitionSchemes">
            <summary>
            Partition scheme objects
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.ObjectType.Permissions">
            <summary>
            Permission objects
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.ObjectType.Queues">
            <summary>
            Queue objects
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.ObjectType.RemoteServiceBindings">
            <summary>
            Remote service binding objects
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.ObjectType.RoleMembership">
            <summary>
            Role membership objects
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.ObjectType.Rules">
            <summary>
            Rule objects
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.ObjectType.ScalarValuedFunctions">
            <summary>
            Scalar valued function objects
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.ObjectType.SearchPropertyLists">
            <summary>
            Search property list objects
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.ObjectType.SecurityPolicies">
            <summary>
            Security policy objects
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.ObjectType.Sequences">
            <summary>
            Sequence objects
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.ObjectType.Services">
            <summary>
            Service objects
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.ObjectType.Signatures">
            <summary>
            Signature objects
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.ObjectType.StoredProcedures">
            <summary>
            Stored procedure objects
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.ObjectType.SymmetricKeys">
            <summary>
            Symmetric key objects
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.ObjectType.Synonyms">
            <summary>
            Synonym objects
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.ObjectType.Tables">
            <summary>
            Table objects
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.ObjectType.TableValuedFunctions">
            <summary>
            Table valued function objects
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.ObjectType.UserDefinedDataTypes">
            <summary>
            User defined data type (non-CLR) objects
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.ObjectType.UserDefinedTableTypes">
            <summary>
            User defined table type objects
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.ObjectType.ClrUserDefinedTypes">
            <summary>
            User defined type (CLR) objects
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.ObjectType.Users">
            <summary>
            User objects
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.ObjectType.Views">
            <summary>
            View objects
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.ObjectType.XmlSchemaCollections">
            <summary>
            Xml schema collection objects
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.ObjectType.Audits">
            <summary>
            Audit objects
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.ObjectType.Credentials">
            <summary>
            Credential objects
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.ObjectType.CryptographicProviders">
            <summary>
            Cryptographic provider objects
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.ObjectType.DatabaseAuditSpecifications">
            <summary>
            Database audit specification objects
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.ObjectType.DatabaseScopedCredentials">
            <summary>
            Database scoped credential objects
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.ObjectType.Endpoints">
            <summary>
            Endpoint objects
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.ObjectType.ErrorMessages">
            <summary>
            Error message objects
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.ObjectType.EventNotifications">
            <summary>
            Error notification objects
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.ObjectType.EventSessions">
            <summary>
            Event session objects
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.ObjectType.LinkedServerLogins">
            <summary>
            Linked server login objects
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.ObjectType.LinkedServers">
            <summary>
            Linked server objects
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.ObjectType.Logins">
            <summary>
            Login objects
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.ObjectType.Routes">
            <summary>
            Route objects
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.ObjectType.ServerAuditSpecifications">
            <summary>
            Server audit specification objects
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.ObjectType.ServerRoleMembership">
            <summary>
            Server role membership objects
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.ObjectType.ServerRoles">
            <summary>
            Server role objects
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Dac.ObjectType.ServerTriggers">
            <summary>
            Server DDL trigger objects
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Operation.#ctor(System.String,System.Action{System.Object,System.Threading.CancellationToken})">
            <summary>
            Construct a new instance of the <see cref="T:Microsoft.SqlServer.Dac.Operation"/> class.
            </summary>
            <param name="caption">
            String describing the operation, suitable for display to user.
            </param>
            <param name="action">
            Delegate to invoke when the operation is executed.
            
            <para>
            The first parameter of the delegate is an opaque object that represents the operation.
            A concrete example of its usage is as the sender for events fired (indirectly) by this operation
            in order to correlate these events to the operation.
            </para>
            <para>
            The second parameter is a nullable <see cref="T:System.Threading.CancellationToken"/> that can be used
            to signal that the operation should be cancelled.
            </para>
            </param>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.Operation.ToString">
            <summary>
            Return string representation of this instalce.
            </summary>
            <returns>
            String caption for this <see cref="T:Microsoft.SqlServer.Dac.Operation"/> instance.
            </returns>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.OperationContext.OperationCancelled">
            <summary>
            Get boolean that indicates whether any operation associated with this context reported a cancellation.
            </summary>
            <value>
            True if an operation reported being cancelled; otherwise false.
            </value>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.OperationResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.OperationResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.OperationResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.OperationResources.BacpacModelValidationCaption">
            <summary>
              Looks up a localized string similar to Validating schema model for data package.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.OperationResources.CreatingDeploymentPlanCaption">
            <summary>
              Looks up a localized string similar to Creating deployment plan.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.OperationResources.DeployCaption">
            <summary>
              Looks up a localized string similar to Deploying package to database.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.OperationResources.DisablingIndexesCaption">
            <summary>
              Looks up a localized string similar to Disabling indexes.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.OperationResources.EnablingIndexesCaption">
            <summary>
              Looks up a localized string similar to Enabling indexes.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.OperationResources.ExecutingDeploymentPlanCaption">
            <summary>
              Looks up a localized string similar to Executing deployment plan.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.OperationResources.ExportCaption">
            <summary>
              Looks up a localized string similar to Exporting data from database.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.OperationResources.GenerateDeployReportCaption">
            <summary>
              Looks up a localized string similar to Generating deployment report.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.OperationResources.GenerateDeployScriptCaption">
            <summary>
              Looks up a localized string similar to Generating deployment script.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.OperationResources.GenerateDriftReportCaption">
            <summary>
              Looks up a localized string similar to Generating drift report.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.OperationResources.HistoryUpdateDisabled">
            <summary>
              Looks up a localized string similar to The dac history table will not be updated..
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.OperationResources.ImportCaption">
            <summary>
              Looks up a localized string similar to Importing package schema and data into database.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.OperationResources.PackageCaption">
            <summary>
              Looks up a localized string similar to Packaging model.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.OperationResources.ProcessingTable">
            <summary>
              Looks up a localized string similar to Processing table: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.OperationResources.RegisterCaption">
            <summary>
              Looks up a localized string similar to Registering metadata for database.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.OperationResources.RemoveLoginsMessage">
            <summary>
              Looks up a localized string similar to Removing references from users to logins.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.OperationResources.ResolverCaption">
            <summary>
              Looks up a localized string similar to Resolving references in schema model.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.OperationResources.ReverseEngineerCaption">
            <summary>
              Looks up a localized string similar to Extracting schema from database.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.OperationResources.TranslateCaption">
            <summary>
              Looks up a localized string similar to Translating package.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.OperationResources.UnregisterCaption">
            <summary>
              Looks up a localized string similar to Unregistering metadata for database.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.OperationResources.ValidationCaption">
            <summary>
              Looks up a localized string similar to Validating schema model.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.OperationResources.VerifyingDeploymentPlanCaption">
            <summary>
              Looks up a localized string similar to Verifying deployment plan.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.OptionDescriptionAttribute">
            <summary>
            Customizes the description of an option.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.OptionDescriptionAttribute.#ctor(System.Type,System.String)">
            <summary>
            Creates a description for an option.
            </summary>
            <param name="resourceClassType">The resource class to extract the resource string from.</param>
            <param name="resourcePropertyName">The resource name to extract.</param>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.OptionDescriptionAttribute.Description">
            <summary>
            The description of the property.    
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.DeploymentPropertyAliasAttribute">
            <summary>
            This class supports the product infrastructure and is not intended to be used directly 
            from your code.
            Defines an alias for the deployment property when used for commandline property overriding
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.DeploymentPropertyAliasAttribute.#ctor(System.String)">
            <summary>
            Defines an alias for a property.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Dac.DeploymentPropertyAliasAttribute.Alias">
            <summary>
            Returns the alias
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.OptionDisplayNameAttribute">
            <summary>
            Customizes the display name of an option.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.OptionDisplayNameAttribute.#ctor(System.Type,System.String)">
            <summary>
            Creates a display name for an option.
            </summary>
            <param name="resourceClassType">The resource class to extract the resource string from.</param>
            <param name="resourcePropertyName">The resource name to extract.</param>        
        </member>
        <member name="P:Microsoft.SqlServer.Dac.OptionDisplayNameAttribute.DisplayName">
            <summary>
            The display name for the property.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.IPackageSource">
            <summary>
            Encapsulates the sourcing of package content, 
            and exposes methods to instantiate various types of objects used to read the package content.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.IPackageSource.OpenSqlPackage">
            <summary>
            Opens a readonly <see cref="T:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackage"/> for the source
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.IPackageSource.OpenSqlPackageForUpdate">
            <summary>
            Opens a <see cref="T:Microsoft.Data.Tools.Schema.Sql.Build.SqlPackage"/> for the source, with the
            package set to an updateable state
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.IPackageSource.GetInputStream">
            <summary>
            Return a stream that can be used to read the package content.
            This stream must be disposed when it is no longer needed.
            </summary>
            <returns>
            <see cref="T:System.IO.Stream"/> used to read package content.
            </returns>
            <remarks>
            This method is a workaround for creating <see cref="T:Microsoft.Data.Tools.Schema.Sql.Dac.Data.BacpacPackage"/> instances from streams.
            It should not be used to create objects that are returned from other methods in this interface.
            </remarks>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.ReportMessageOperation">
            <summary>
            Reports all DataSchemaErrors added to an ErrorManager through the supplied MessageHandler.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.UnownedStream">
            <summary>
            Decorator for <see cref="T:System.IO.Stream"/> that avoids disposal of the underlying stream.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Dac.SqlConnectionStringBuilderHelper">
            <summary>
            Public class to support SQL Authentication configuration for DacFx
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.SqlConnectionStringBuilderHelper.IsAuthenticationSupported">
            <summary>
            Checks whether "Authentication" is supported in the runtime environment
            The keyword "Authentication" is not supported until .Net4.6. If user uses a version of .Net less than 4.6, DacFx should avoid using "Authentication"
            </summary>
            <returns>true if "Authentication" is present in current .Net version</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.SqlConnectionStringBuilderHelper.SetAuthentication(System.Data.SqlClient.SqlConnectionStringBuilder,System.Data.SqlClient.SqlConnectionStringBuilder)">
            <summary>
            Set Authentication value from source builder to the target builder
            </summary>
            <param name="sourceBuilder">the source connection string builder</param>
            <param name="targetBuilder">the target connection string builder</param>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.SqlConnectionStringBuilderHelper.SetAuthentication(System.Data.SqlClient.SqlConnectionStringBuilder,System.String)">
            <summary>
            Set Authentication using reflection
            </summary>
            <param name="sbConnectionString"></param>
            <param name="authenticationType"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.SqlConnectionStringBuilderHelper.GetAuthenticationString(System.Data.SqlClient.SqlConnectionStringBuilder)">
            <summary>
            Get Authentication as string from connectionStringBuilder
            </summary>
            <param name="connectionStringBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.SqlConnectionStringBuilderHelper.IsAuthenticationSpecified(System.Data.SqlClient.SqlConnectionStringBuilder)">
            <summary>
            Determines whether a connection string builder has a value specified for the Authentication property.
            </summary>
            <param name="connectionStringBuilder">A connection string builder that might have authentication specified.</param>
            <returns>True if the authentication property is supported by the connection string builder and the authentication property is specified. False otherwise.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Dac.SqlConnectionStringBuilderHelper.GetConnectionStringWithAlwaysEncryptedSetting(System.Data.SqlClient.SqlConnectionStringBuilder,System.Boolean)">
            <summary>
            Sets AlwaysEncrypted setting in connection string if it is available in the .NET framework and returns the updated connection string
            No-op if there is not .NET 4.6
            </summary>
            <param name="connectionStringBuilder">A connection string builder that might have always encrypted setting specified.</param>
            <param name="enableAlwaysEncrypted">True, to enable always encrypted setting, else False</param>
            <returns>connection string with Column Encryption Setting set to Enabled or Disabled based on enableAlwaysEncrypted</returns>
        </member>
        <member name="T:AssemblyRef">
            <summary>
            Sets public key string for friend assemblies.
            </summary>
        </member>
        <member name="F:AssemblyRef.ProductPublicKey">
            <summary>No signing</summary>
        </member>
    </members>
</doc>
